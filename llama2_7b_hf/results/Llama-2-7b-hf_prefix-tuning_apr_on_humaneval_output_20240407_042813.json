{
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy lines start\n            double distance = numbers.get(i) - numbers.get(j);\n// buggy lines end\n                        if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}"
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy lines start\n        } else {\n// buggy lines end\n                    current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "function range": "7,5-27,5",
      "output": [
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n// buggy lines start\n    return number / 1.0;\n// buggy lines end\n    }",
      "function range": "4,5-6,5",
      "output": [
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }",
        "public static double truncate_number(double number) {\n    return number;\n    }"
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy lines start\n        if (balance > 0){\n            return false;\n        }\n    }\n    return true;\n// buggy lines end\n        }",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}"
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy lines start\n        deviation_sum += (number - mean) * (number - mean);\n// buggy lines end\n            }\n    return deviation_sum / numbers.size();\n}",
      "function range": "6,5-17,5",
      "output": [
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}"
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy lines start\n    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy lines end\n            result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "function range": "7,5-19,5",
      "output": [
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}"
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy lines start\n            }\n// buggy lines end\n                    }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "function range": "7,5-24,5",
      "output": [
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n            if (depth < 0) {\n                throw new IllegalArgumentException(\"String_Node_Str\");\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n            if (depth < 0) {\n                throw new IllegalArgumentException(\"String_Node_Str\");\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            if (c == ')'){\n                depth -= 1;\n            }\n            if (depth < 0) {\n                throw new IllegalArgumentException(\"String_Node_Str\");\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}"
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy lines start\n        result.add(string);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "7,5-13,5",
      "output": [
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.indexOf(substring) != -1)\n            result.add(string);\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        String lowerString = string.toLowerCase();\n        if (substring.contains(lowerString)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        String lowerString = string.toLowerCase();\n        if (substring.contains(lowerString)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        String lowerString = string.toLowerCase();\n        if (substring.contains(lowerString)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        String lowerString = string.toLowerCase();\n        if (substring.contains(lowerString)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        String lowerString = string.toLowerCase();\n        if (substring.contains(lowerString)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        String lowerString = string.toLowerCase();\n        if (substring.contains(lowerString)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        String lowerString = string.toLowerCase();\n        if (substring.contains(lowerString)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        String lowerString = string.toLowerCase();\n        if (substring.contains(lowerString)) {\n            result.add(string);\n        }\n    }\n    return result;\n}"
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy lines start\n    Integer[] result = new Integer[2];\n// buggy lines end\n        for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "function range": "6,5-13,5",
      "output": [
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}"
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy lines start\n        running_max = Math.max(running_max, n);\n// buggy lines end\n                result.add(running_max);\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}"
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy lines start\n    result += str.substring(0, beginning_of_suffix);\n// buggy lines end\n        return result;\n}",
      "function range": "12,5-24,5",
      "output": [
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}"
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy lines start\n    }\n// buggy lines end\n        return result;\n}",
      "function range": "4,5-12,5",
      "output": [
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}"
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy lines start\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n// buggy lines end\n                }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "function range": "6,5-19,5",
      "output": [
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}"
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy lines start\n        a = b;\n        b = a % b;\n// buggy lines end\n            }\n    return a;\n}",
      "function range": "4,5-10,5",
      "output": [
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a;\n        a = b;\n        b = t % b;\n        if (b == 0) {\n            return t;\n        }\n    }\n    return a;\n}"
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy lines start\n        result.add(string.substring(i + 1));\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "7,5-15,5",
      "output": [
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1).toUpperCase());\n    }\n    return result;\n}"
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy lines start\n    return result;\n// buggy lines end\n    }",
      "function range": "4,5-10,5",
      "output": [
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}"
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy lines start\n            distinct.add(c);\n// buggy lines end\n                }\n    return distinct.size();\n}",
      "function range": "6,5-14,5",
      "output": [
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}"
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy lines start\n    for (String note : music_string.split(\" \")){\n// buggy lines end\n            result.add(note_map.get(note));\n    }\n    return result;\n}",
      "function range": "8,5-20,5",
      "output": [
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}",
        "for (String note : music_string.split(\" \")){\n    result.add(note_map.get(note));\n}"
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy lines start\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy lines end\n            if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "function range": "4,5-12,5",
      "output": [
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}"
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy lines start\n    Collections.sort(number_array);\n// buggy lines end\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "function range": "6,5-27,5",
      "output": [
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, StringComparator.NUMERIC);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}"
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy lines start\n        for (int j = 0; j < numbers.length; j += 1){\n// buggy lines end\n                    double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-24,5",
      "output": [
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = 0; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy lines start\n        else if (numbers[i] < min) {\n// buggy lines end\n                    min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "function range": "4,5-22,5",
      "output": [
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}"
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy lines start\n        result.add((Integer) value);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}"
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n// buggy lines start\n    return string.length() - 1;\n// buggy lines end\n    }",
      "function range": "4,5-6,5",
      "output": [
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }",
        "public static int strlen(String string){\n    return string.length();\n    }"
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n// buggy lines start\n    for (int i = n; i >= 0; i -= 1){\n// buggy lines end\n            if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "function range": "4,5-10,5",
      "output": [
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 0; i -= 1){\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}"
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy lines start\n    return result;\n// buggy lines end\n    }",
      "function range": "7,5-21,5",
      "output": [
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}"
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy lines start\n        count.put(n, count.get(n) + 1);\n// buggy lines end\n            }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "function range": "8,5-22,5",
      "output": [
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.get(n) == 0)\n            count.put(n, 1);\n        else\n            count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}"
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy lines start\n            char_list[i] = Character.toLowerCase(c);\n        }\n        else {\n            char_list[i] = Character.toUpperCase(c);\n// buggy lines end\n                    }\n    }\n    return new String(char_list);\n}",
      "function range": "4,5-17,5",
      "output": [
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}"
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n// buggy lines start\n    String result = null;\n// buggy lines end\n        for (String string : strings)\n        result += string;\n    return result;\n}",
      "function range": "4,5-9,5",
      "output": [
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n        result += \"String_Node_Str\";\n    }\n    return result;\n}"
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy lines start\n        if (string.startsWith(prefix, 1)){\n// buggy lines end\n                    result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}"
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy lines start\n        result.add(number);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        result.add(number);\n    }\n    return result;\n}"
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy lines start\n    for (int k = 0; k < n; k += 1){\n// buggy lines end\n            if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "function range": "4,5-12,5",
      "output": [
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy lines start\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy lines end\n                    begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "function range": "14,5-32,5",
      "output": [
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}"
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy lines start\n            result.add(thirds.get(i));\n// buggy lines end\n                    } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "function range": "8,5-25,5",
      "output": [
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}"
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy lines start\n        result.add(n);\n// buggy lines end\n            }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "8,5-17,5",
      "output": [
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        result.add(n);\n        Collections.sort(result);\n    }\n    return result;\n}"
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n// buggy lines start\n    int m = 0;\n// buggy lines end\n        for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "function range": "6,5-14,5",
      "output": [
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "int max_element(List<Integer> l) {\n    int m = 0;\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}"
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy lines start\n            for (int j = 0; j < i + \"\".length(); j += 1){\n                if (i + \"\".substring(j, j + 1) == \"7\")\n// buggy lines end\n                                result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-16,5",
      "output": [
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < i + \"String_Node_Str\"; j += 1){\n                if (i + \"String_Node_Str\" + j == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy lines start\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n// buggy lines end\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "function range": "6,5-22,5",
      "output": [
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}"
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy lines start\n    for (int i = 0; i < s.length(); i += 3){\n// buggy lines end\n            groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "function range": "8,13-26,13",
      "output": [
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}"
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy lines start\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1)))\n// buggy lines end\n                    n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "function range": "16,5-29,5",
      "output": [
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        fib.add(fib.get(len - 1) + fib.get(len) - fib.get(len / 2));\n\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}"
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy lines start\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n// buggy lines end\n                        if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "21,5-31,5",
      "output": [
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}"
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n// buggy lines start\n    return n;\n// buggy lines end\n    }",
      "function range": "14,5-16,5",
      "output": [
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }",
        "public static int car_race_collision(int n) {\n    return n + 1;\n    }"
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy lines start\n        result.add(n - 1);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "13,5-20,5",
      "output": [
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n - 1);\n    }\n    return result;\n}"
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy lines start\n        for (int j = 0; j < l.size(); j += 1){\n// buggy lines end\n                    if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "10,5-18,5",
      "output": [
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = 0; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}"
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy lines start\n        result = result + x % base;\n        x = x - x / base;\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        base = base * 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x - x / base;\n        if (base > 10)\n            result = result + \"String_Node_Str\" + (base / 10);\n        base = base / 10;\n    }\n    return result;\n}"
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n// buggy lines start\n    return a * h;\n// buggy lines end\n    }",
      "function range": "8,5-10,5",
      "output": [
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return a * h * h;\n    }"
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy lines start\n    }\n// buggy lines end\n        return result.get(result.size() - 1);\n}",
      "function range": "20,5-35,5",
      "output": [
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n        return result.get(result.size() - 1);\n}"
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy lines start\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n// buggy lines end\n            }\n}",
      "function range": "12,5-20,5",
      "output": [
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + MIN(list[(int) (list.length / 2) + 1], 0.5);\n            }\n}"
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy lines start\n        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n    }\n    return false;\n// buggy lines end\n        }",
      "function range": "14,5-20,5",
      "output": [
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy lines start\n        result = 2 * result;\n    }\n    return result % p;\n// buggy lines end\n        }",
      "function range": "16,5-22,5",
      "output": [
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}"
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy lines start\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy lines end\n                sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-23,5",
      "output": [
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}"
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy lines start\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n// buggy lines end\n                    continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "18,5-26,5",
      "output": [
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (isValidCharacter(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (is_valid(c))\n            sb.append(c);\n    }\n    return sb.toString();\n}"
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy lines start\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n// buggy lines end\n        }",
      "function range": "10,5-16,5",
      "output": [
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}"
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n// buggy lines start\n    return x | y;\n// buggy lines end\n    }",
      "function range": "10,5-12,5",
      "output": [
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y;\n}"
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n// buggy lines start\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy lines end\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "function range": "20,5-31,5",
      "output": [
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}"
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n// buggy lines start\n    return fib(n - 1) + fib(n - 2);\n// buggy lines end\n    }",
      "function range": "12,5-14,5",
      "output": [
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }",
        "public static int fib(int n) {\n    return fib(n - 1) + fib(n - 2);\n    }"
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy lines start\n        if (depth >= 0)\n            return true;\n    }\n    return false;\n// buggy lines end\n        }",
      "function range": "16,5-27,5",
      "output": [
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth == 0)\n            return true;\n    }\n    return false;\n}"
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy lines start\n    sorted = l;\n// buggy lines end\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "function range": "14,5-28,5",
      "output": [
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = l;\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}"
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n// buggy lines start\n    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy lines end\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "function range": "12,5-29,5",
      "output": [
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}"
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy lines start\n        if (is_prime(j)){\n            largest = n % j;\n// buggy lines end\n                }\n    }\n    return largest;\n}",
      "function range": "20,5-28,5",
      "output": [
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j > 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j > 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j > 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j > 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j > 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j != 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j != 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j != 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j != 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (is_prime(j) && n % j != 0) {\n            largest = n % j;\n            break;\n        }\n    }\n    return largest;\n}"
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n// buggy lines start\n    return (n + 1) * (n / 2);\n// buggy lines end\n    }",
      "function range": "16,5-18,5",
      "output": [
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n    }"
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy lines start\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n// buggy lines end\n        return result;\n}",
      "function range": "15,5-21,5",
      "output": [
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n\n        return result;\n}"
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy lines start\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n// buggy lines end\n    }",
      "function range": "17,5-23,5",
      "output": [
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib + 1;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib + 1;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib + 1;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib + 1;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib + 1;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib + 1;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib + 1;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib * 6 + 4;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib * 6 + 4;\n    }\n    return fibfib;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int fibfib = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib = fibfib * 6 + 4;\n    }\n    return fibfib;\n}"
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy lines start\n    if (str_chars[str_chars.length - 1] == 'y')\n// buggy lines end\n            result += 1;\n    return result;\n}",
      "function range": "15,5-27,5",
      "output": [
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y')\n        result += 1;\n    return result;\n}"
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy lines start\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n// buggy lines end\n            }\n}",
      "function range": "12,5-23,5",
      "output": [
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n    }\n}"
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy lines start\n        if (c == ' ')\n            break;\n// buggy lines end\n                if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
      "function range": "16,5-25,5",
      "output": [
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}"
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy lines start\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "15,5-23,5",
      "output": [
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}"
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n// buggy lines start\n    int min_even = 0;\n    int index = 0;\n// buggy lines end\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "function range": "36,5-49,5",
      "output": [
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = 0;\n    int index = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}"
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy lines start\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n// buggy lines end\n    return result;\n}",
      "function range": "13,5-26,5",
      "output": [
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i = 0; i < lst.length; i += 1) {\n        frq[i] += 1;\n    }\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i = 0; i <= lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i = 0; i <= max; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    if (max == 0)\n        return -1;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    if (max == 0)\n        return -1;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    if (max == 0)\n        return -1;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    if (max == 0)\n        return -1;\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i = 0; i < lst.length; i += 1) {\n        frq[i] += 1;\n    }\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}"
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy lines start\n    }\n// buggy lines end\n        return result;\n}",
      "function range": "17,5-29,5",
      "output": [
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        Collections.sort(lst);\n    }\n\n        return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        Collections.sort(lst);\n    }\n\n        return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        lst.remove(Collections.max(lst));\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        lst.remove(Collections.max(lst));\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        lst.remove(Collections.max(lst));\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        lst.remove(Collections.max(lst));\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        lst.remove(Collections.max(lst));\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        lst.remove(Collections.max(lst));\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        lst.remove(Collections.max(lst));\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        lst.remove(Collections.max(lst));\n    }\n\n    return result;\n}"
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n// buggy lines start\npublic static double triangle_area_2(double a, double b, double c) {\n// buggy lines end\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "function range": "16,5-26,5",
      "output": [
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}"
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n// buggy lines start\n    }\n// buggy lines end\n        return true;\n}",
      "function range": "20,5-34,5",
      "output": [
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy lines start\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i])\n// buggy lines end\n                result += 1;\n    }\n    return result;\n}",
      "function range": "13,5-21,5",
      "output": [
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}"
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy lines start\n    for (String st : lst1)\n        l2 = st.length();\n// buggy lines end\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "function range": "18,5-29,5",
      "output": [
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}"
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy lines start\n            for (int k = j; k < a; j += 1) {\n// buggy lines end\n                            if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "19,5-31,5",
      "output": [
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; j += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}"
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n// buggy lines start\n    int power = 1;\n// buggy lines end\n        while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "function range": "15,5-21,5",
      "output": [
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}"
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n// buggy lines start\n    double root = Math.pow(a, 1./3);\n// buggy lines end\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "function range": "18,5-24,5",
      "output": [
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}"
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy lines start\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n// buggy lines end\n                    result += 1;\n    }\n    return result;\n}",
      "function range": "21,5-28,5",
      "output": [
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n            result += 1;\n    }\n    return result;\n}"
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n// buggy lines start\n    String result = Integer.toHexString(decimal);\n// buggy lines end\n        return \"db\" + result + \"db\";\n}",
      "function range": "15,5-18,5",
      "output": [
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal);\n\n        return \"db\" + result + \"db\";\n}"
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy lines start\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n// buggy lines end\n                    return false;\n    }\n    return true;\n}",
      "function range": "15,5-23,5",
      "output": [
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy lines start\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n// buggy lines end\n                else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "function range": "26,5-59,5",
      "output": [
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}"
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy lines start\n        if (l - i == 0)\n// buggy lines end\n                    return false;\n    }\n    return true;\n}",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy lines start\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n// buggy lines end\n    }",
      "function range": "7,5-11,5",
      "output": [
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n}"
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy lines start\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n// buggy lines end\n            }\n    return Integer.toBinaryString(sum);\n}",
      "function range": "17,5-23,5",
      "output": [
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}"
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy lines start\n    for (int i = 0; i < lst.length; i += 1) {\n// buggy lines end\n            if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "function range": "8,5-15,5",
      "output": [
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}"
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy lines start\n        result += new String(chars);\n    }\n    return result;\n// buggy lines end\n        }",
      "function range": "17,5-25,5",
      "output": [
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}"
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy lines start\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n// buggy lines end\n                    }\n        }\n    }\n    return result;\n}",
      "function range": "22,5-33,5",
      "output": [
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy lines start\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n// buggy lines end\n                    }\n        return array;\n    }\n}",
      "function range": "19,5-32,5",
      "output": [
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}"
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy lines start\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n// buggy lines end\n                            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n// buggy lines start\n    List<Integer> numbers = new ArrayList<Integer>();\n// buggy lines end\n        for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "function range": "15,5-25,5",
      "output": [
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n\n    for (Integer n : lst) {\n        numbers.add(n);\n    }\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}"
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy lines start\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n// buggy lines end\n                    result += 1;\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n            result += 1;\n    }\n    return result;\n}"
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n// buggy lines start\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n// buggy lines end\n                return true;\n    }\n    return false;\n}",
      "function range": "17,5-23,5",
      "output": [
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}"
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy lines start\n        if (Character.isLowerCase(c)) {\n// buggy lines end\n                    c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-32,5",
      "output": [
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}"
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy lines start\n        result += (int) c;\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "22,5-35,5",
      "output": [
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}"
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy lines start\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n// buggy lines end\n                            state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "function range": "16,5-43,5",
      "output": [
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}"
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy lines start\n        boolean is_prime = false;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n// buggy lines end\n                    }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "function range": "17,5-30,5",
      "output": [
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}"
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n// buggy lines start\n    return (a % 10) * (b % 10);\n// buggy lines end\n    }",
      "function range": "13,5-15,5",
      "output": [
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10);\n}"
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy lines start\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n// buggy lines end\n                    count += 1;\n    }\n    return count;\n}",
      "function range": "11,5-19,5",
      "output": [
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n        count += 1;\n    }\n    return count;\n}"
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy lines start\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy lines end\n        } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "function range": "20,5-35,5",
      "output": [
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0) {\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}"
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy lines start\n\t\tpile.add(n - 2 * i);\n// buggy lines end\n  \t}\n\treturn pile;\n}",
      "function range": "20,2-26,2",
      "output": [
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}"
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy lines start\n\tString s_list = \"\";\n// buggy lines end\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "function range": "15,2-30,2",
      "output": [
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = \"\";\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}"
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n// buggy lines start\n    if(x < y) return -1;\n// buggy lines end\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "function range": "14,5-19,5",
      "output": [
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}"
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy lines start\n        avg_rounded = (int) Math.ceil(avg);\n// buggy lines end\n            } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "function range": "15,5-30,5",
      "output": [
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}"
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy lines start\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n// buggy lines end\n                            break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}"
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy lines start\n        if(digit_map.get(num) != \"\") {\n// buggy lines end\n                    result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "function range": "31,5-50,5",
      "output": [
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if(digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}"
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy lines start\n            for(int j = 1; j <= i; i++) x -= j;\n// buggy lines end\n                        ret.add(x);\n        }\n    }\n    return ret;\n}",
      "function range": "16,5-30,5",
      "output": [
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}"
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy lines start\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n// buggy lines end\n            }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "function range": "39,5-47,5",
      "output": [
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1) even_palindrome_count--;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}"
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy lines start\n        if(neg) num *= 1;\n// buggy lines end\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "function range": "6,5-20,5",
      "output": [
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) {\n            num *= -1;\n        }\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}"
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy lines start\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n// buggy lines end\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "function range": "7,5-29,5",
      "output": [
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}"
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy lines start\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n// buggy lines end\n        }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "function range": "20,5-32,5",
      "output": [
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}"
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy lines start\n        if(count_letter[i] < most_count) {\n// buggy lines end\n                    most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "function range": "19,5-40,5",
      "output": [
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}"
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy lines start\n        if(c.indexOf(s.charAt(i)) != -1) {\n// buggy lines end\n                    new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "function range": "17,5-32,5",
      "output": [
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}"
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy lines start\n            if(digit % 2 == 0) {\n                n--;\n// buggy lines end\n                        }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "function range": "19,5-32,5",
      "output": [
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}"
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy lines start\n        s += num;\n// buggy lines end\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "function range": "14,5-32,5",
      "output": [
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}"
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy lines start\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n// buggy lines end\n                }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "function range": "38,5-48,5",
      "output": [
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += Math.min(grid[j][i], bucket_capacity);\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}"
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy lines start\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n// buggy lines end\n         if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "function range": "31,10-42,10",
      "output": [
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}"
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy lines start\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n// buggy lines end\n                for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < RUNS.length; k++) {\n                if(RUNS.charAt(k) == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < RUNS.length; k++) {\n                if(RUNS[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants <= n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        boolean consonant = true;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) consonant = false;\n        }\n        if(consonant) num_consonants++;\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        boolean consonant = true;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) consonant = false;\n        }\n        if(consonant) num_consonants++;\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        boolean consonant = true;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) consonant = false;\n        }\n        if(consonant) num_consonants++;\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        boolean consonant = true;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) consonant = false;\n        }\n        if(consonant) num_consonants++;\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        boolean consonant = true;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) consonant = false;\n        }\n        if(consonant) num_consonants++;\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        boolean consonant = true;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) consonant = false;\n        }\n        if(consonant) num_consonants++;\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}"
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy lines start\n    for(int i = word.length() - 2; i >= 0; i--) {\n// buggy lines end\n            if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "function range": "23,5-34,5",
      "output": [
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}"
      ]
    },
    "MATCH_PARENS": {
      "loc": "22-23",
      "input": "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n// buggy lines start\n        if(s.charAt(i) == '(') val--;\n// buggy lines end\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
      "function range": "19,5-27,5",
      "output": [
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') {\n            val--;\n        }\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}"
      ]
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy lines start\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n// buggy lines end\n            result.add(arr.get(i));\n    }\n    return result;\n}",
      "function range": "32,5-39,5",
      "output": [
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}"
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy lines start\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n// buggy lines end\n                    result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "function range": "16,5-24,5",
      "output": [
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}"
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy lines start\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n// buggy lines end\n                }\n    }\n    return result;\n}",
      "function range": "21,5-29,5",
      "output": [
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}"
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy lines start\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n// buggy lines end\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "24,5-34,5",
      "output": [
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}"
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy lines start\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n// buggy lines end\n                    }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "function range": "25,5-50,5",
      "output": [
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}"
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy lines start\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n// buggy lines end\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "function range": "14,5-28,5",
      "output": [
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}"
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy lines start\n        if(lst[i] <= lst[i + 1]) return false;\n// buggy lines end\n            }\n    return true;\n}",
      "function range": "22,5-37,5",
      "output": [
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n}"
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n// buggy lines start\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n// buggy lines end\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "function range": "33,5-39,5",
      "output": [
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}"
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy lines start\n        else if(arr[i] > 0) prod *= 1;\n// buggy lines end\n            }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "function range": "16,5-28,5",
      "output": [
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}"
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy lines start\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy lines end\n                            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "function range": "35,5-54,5",
      "output": [
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}"
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy lines start\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy lines end\n        }\n    return sequence;\n}",
      "function range": "23,5-37,5",
      "output": [
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}"
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy lines start\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n// buggy lines end\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "function range": "13,5-26,5",
      "output": [
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}"
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy lines start\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy lines end\n                i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "function range": "21,5-37,5",
      "output": [
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}"
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n// buggy lines start\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy lines end\n        }\n    return result;\n}",
      "function range": "16,5-22,5",
      "output": [
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    }\n    return result;\n}"
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy lines start\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n// buggy lines end\n    }",
      "function range": "18,5-26,5",
      "output": [
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}"
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n// buggy lines start\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy lines end\n        }\n    return ind;\n}",
      "function range": "16,5-22,5",
      "output": [
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = i + 1;\n            break;\n        }\n    }\n    return ind;\n}"
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n// buggy lines start\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n// buggy lines end\n            } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "function range": "16,5-32,5",
      "output": [
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE;\n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n            i++;\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n            i++;\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}"
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy lines start\n    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n// buggy lines end\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "function range": "17,5-36,5",
      "output": [
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}"
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n// buggy lines start\n    return ((n * 2 == 1) ^ (n < 8));\n// buggy lines end\n    }",
      "function range": "13,5-15,5",
      "output": [
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8));\n}"
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy lines start\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n// buggy lines end\n        }\n    return special_fact;\n}",
      "function range": "18,5-25,5",
      "output": [
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n    }\n\n    return special_fact;\n}"
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy lines start\n    return new_text;\n// buggy lines end\n    }",
      "function range": "13,5-37,5",
      "output": [
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}"
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy lines start\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy lines end\n            return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "function range": "17,5-35,5",
      "output": [
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()) {\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}"
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy lines start\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n// buggy lines end\n                    result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "function range": "13,5-24,5",
      "output": [
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}"
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy lines start\n        for (int i = 2; i < word.length(); i += 1){\n// buggy lines end\n                    if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "function range": "22,5-34,5",
      "output": [
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        for (int i = 2; i < word.length(); i += 1) {\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}"
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy lines start\n    if (numerator / denom == (int) (numerator / denom))\n// buggy lines end\n            return true;\n    return false;\n}",
      "function range": "15,5-26,5",
      "output": [
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (numerator / denom == (int) (numerator / denom)) {\n        return true;\n    }\n    return false;\n}"
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy lines start\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n// buggy lines end\n                    if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "function range": "17,5-44,5",
      "output": [
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}"
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy lines start\n            if (odd_digits.contains(number_as_string.charAt(0))\n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n// buggy lines end\n                            count += 1;\n        }\n    }\n    return count;\n}",
      "function range": "14,5-26,5",
      "output": [
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n\n                            count += 1;\n        }\n    }\n    return count;\n}"
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy lines start\n    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n// buggy lines end\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "16,5-30,5",
      "output": [
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n - 2; i += 1) {\n        for (int j = 0; j < n - 1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1) {\n        for (int j = 0; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy lines start\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n// buggy lines end\n        return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}"
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy lines start\n        (s1, s2) -> s1.length() - s2.length()\n// buggy lines end\n            );\n    return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() - s2.length())\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() - s2.length())\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() - s2.length())\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() - s2.length())\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() - s2.length())\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() - s2.length())\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() - s2.length())\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() < s2.length() ? 1 : -1)\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() < s2.length() ? 1 : -1)\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Long.signum(s1.length() - s2.length()) * (s1.length() < s2.length() ? 1 : -1)\n            );\n    return result;\n}"
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy lines start\n        if (n % i == 0) return x;\n    }\n    return y;\n// buggy lines end\n        }",
      "function range": "11,5-17,5",
      "output": [
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) return x;\n    }\n    return y;\n}"
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy lines start\n                result += d_int;\n// buggy lines end\n                            }\n        }\n    }\n    return result;\n}",
      "function range": "14,5-25,5",
      "output": [
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy lines start\n        result[i] = Math.floorDiv(game[i], guess[i]);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "12,5-20,5",
      "output": [
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}"
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy lines start\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n// buggy lines end\n                }\n    return class_name + \".\" + strong;\n}",
      "function range": "20,5-35,5",
      "output": [
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}"
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy lines start\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n// buggy lines end\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}"
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy lines start\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n// buggy lines end\n        }\n    return new int[] {even_count, odd_count};\n}",
      "function range": "10,5-19,5",
      "output": [
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}"
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy lines start\n        result += sym[i];\n// buggy lines end\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "function range": "13,5-27,5",
      "output": [
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n            number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n            number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}"
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy lines start\n    return a*a + b*b == c*c;\n// buggy lines end\n    }",
      "function range": "12,5-14,5",
      "output": [
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}"
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy lines start\n            return s1.size() - s2.size();\n// buggy lines end\n                    }\n    );\n    return words_list.get(0);\n}",
      "function range": "18,5-31,5",
      "output": [
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s1.size() - s2.size() - (w1.length() - w2.length());\n        }\n    );\n    return words_list.get(0);\n}"
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n// buggy lines start\n    return new int[] {number + need,  remaining - need};\n// buggy lines end\n    }",
      "function range": "31,5-33,5",
      "output": [
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need};\n}"
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy lines start\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n// buggy lines end\n        }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "function range": "30,5-38,5",
      "output": [
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = \"String_Node_Str\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = \"String_Node_Str\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = \"String_Node_Str\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + \"String_Node_Str\" + operator[1] + \"String_Node_Str\" + operand[0] + \"String_Node_Str\" + operand[1];\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + \"String_Node_Str\" + operator[1] + \"String_Node_Str\" + operand[0] + \"String_Node_Str\" + operand[1];\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + \"String_Node_Str\" + operator[1] + \"String_Node_Str\" + operand[0] + \"String_Node_Str\" + operand[1];\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + \"String_Node_Str\" + operator[1] + \"String_Node_Str\" + operand[0] + \"String_Node_Str\" + operand[1];\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + \"String_Node_Str\" + operator[1] + \"String_Node_Str\" + operand[0] + \"String_Node_Str\" + operand[1];\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + \"String_Node_Str\" + operator[1] + \"String_Node_Str\" + operand[0] + \"String_Node_Str\" + operand[1];\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + \"String_Node_Str\" + operator[1] + \"String_Node_Str\" + operand[0] + \"String_Node_Str\" + operand[1];\n    return Double.parseDouble(engine.eval(expression).toString());\n}"
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy lines start\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n// buggy lines end\n            }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}"
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy lines start\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n// buggy lines end\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "function range": "13,5-20,5",
      "output": [
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}"
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy lines start\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n// buggy lines end\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "function range": "14,5-23,5",
      "output": [
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}"
      ]
    }
  },
  "model": "Llama-2-7b-hf",
  "train_dataset": "apr",
  "time": 764,
  "benchmark": "humaneval"
}