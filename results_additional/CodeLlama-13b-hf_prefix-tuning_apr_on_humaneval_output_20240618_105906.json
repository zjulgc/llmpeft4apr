{
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy lines start\n            double distance = numbers.get(i) - numbers.get(j);\n// buggy lines end\n                        if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                        if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n\n                        if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n                    double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                        if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance =Math.abs(numbers.get(i) - numbers.get(j));\n                        if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = safe_abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (Math.abs(distance) < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold)\n                        return true;\n        }\n    }\n    return false;\n}",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance =numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}"
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy lines start\n        } else {\n// buggy lines end\n                    current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "function range": "7,5-27,5",
      "output": [
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n\n        } else if (c == ')') {\n\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '(') {\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '(') {\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')' || c == ',' && current_depth > 0) {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n\n        } else if (c == ')'){\n\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '(') {\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')' || c == ',' || c == ';') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '(') {\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')' || c == ',' || c == '.') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '(') {\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')' && current_depth > 0) {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else if (c == ',' && current_depth == 0) {\n            result.add(current_string);\n            current_string = \"\";\n        } else {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n\n        } else if (c == ')') {\n                    current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '(') {\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')' && current_depth > 0) {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}"
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n// buggy lines start\n    return number / 1.0;\n// buggy lines end\n    }",
      "function range": "4,5-6,5",
      "output": [
        "public static double truncate_number(double number) {\n\n    return number;\n\n    }",
        "public static double truncate_number(double number) {\n    return number / 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "public static double truncate_number(double number) {\n\n    return number / 1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "public static double truncate_number(double number) {\n    return number / 1.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;\n    }",
        "public static double truncate_number(double number) {\n    return number / 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;\n    }",
        "public static double truncate_number(double number) {\n    return number / 1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;\n    }",
        "public static double truncate_number(double number) {\n    return number / 1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;\n    }",
        "public static double truncate_number(double number) {\n\n    return number / 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;\n\n    }",
        "public static double truncate_number(double number) {\n\n    return number / 1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;\n\n    }",
        "public static double truncate_number(double number) {\n    return number / 1.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;\n}"
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy lines start\n        if (balance > 0){\n            return false;\n        }\n    }\n    return true;\n// buggy lines end\n        }",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n\n        if (balance <= 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n\n        if (balance < 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations) {\n        balance += op;\n\n        if (balance <= 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations) {\n        balance += op;\n\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n\n        if (balance >= 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "public static booleanbelow_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations) {\n        balance += op;\n\n        if (balance <= 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n\n        if (balance > 0) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static booleanbelow_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n\n        if (balance <= 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations) {\n        balance += op;\n\n        if (balance <= 0){\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations) {\n        balance += op;\n\n        if (balance >= 0) {\n            return false;\n        }\n    }\n    return true;\n}"
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy lines start\n        deviation_sum += (number - mean) * (number - mean);\n// buggy lines end\n            }\n    return deviation_sum / numbers.size();\n}",
      "function range": "6,5-17,5",
      "output": [
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean) * Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return decomposition_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers) {\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers) {\n        deviation_sum += Math.abs(number - mean) * Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers) {\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers) {\n        deviation_sum += Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double decomposition_sum = 0.;\n    for (Double number : numbers){\n        decomposition_sum += Math.abs(number - mean);\n    }\n    return decomposition_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        decomposition_sum += (number - mean) * (number - mean);\n    }\n    return decomposition_sum / numbers.size();\n}",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.*;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}"
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy lines start\n    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy lines end\n            result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "function range": "7,5-19,5",
      "output": [
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n            result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimiter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int num : numbers) {\n        result.add(num);\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int number : numbers) {\n        result.add(number);\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (Integer number : numbers) {\n        result.add(number);\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i : numbers) {\n        result.add(i);\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i <numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    for (int i = 0; i < numbers.size() - 1; i += 1) {\n        result.add(numbers.get(i));\n        result.add(delimiter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}"
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy lines start\n            }\n// buggy lines end\n                    }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "function range": "7,5-24,5",
      "output": [
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')') {\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()) {\n            if (c == '(') {\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')') {\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == '[' || c == '(') {\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ']' || c == ')') {\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')') {\n                depth -= 1;\n            }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')') {\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ']' || c == ')') {\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()) {\n            if (c == '(') {\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')') {\n                depth -= 1;\n            }\n            result.add(max_depth);\n        }\n    }\n    return result;\n}",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == '[' || c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ']' || c == ')'){\n                depth -= 1;\n            }\n        result.add(max_depth);\n    }\n    return result;\n}"
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy lines start\n        result.add(string);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "7,5-13,5",
      "output": [
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n        }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings) {\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, Stringsubstring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.substring(0, substring.length()).equals(substring))\n            result.add(string);\n        }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.indexOf(substring) != -1) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.contains(substring)){\n            result.add(string);\n        }\n        }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, Stringsubstring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings) {\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.substring(0, substring.length()).equals(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n}"
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy lines start\n    Integer[] result = new Integer[2];\n// buggy lines end\n        for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "function range": "6,5-13,5",
      "output": [
        "public static Integer[] sum_product(List<Integer> numbers) {\n\n    int[] result = new int[2];\n\n        for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n\n    int[] result = new int[2];\n\n        for (Integer n : numbers) {\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    int[] result = new int[2];\n        for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    int[] result = new int[2];\n        for (Integer n : numbers) {\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n\n    for (int i = 0; i < numbers.size(); i++) {\n        result[0] += numbers.get(i);\n        result[1] *= numbers.get(i);\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n\n    Integer[] result = new Integer[2];\n\n        for (Integer n : numbers) {\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n\n    Integer[] result = new Integer[2];\n\n        for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n\n    int len = numbers.size();\n    if (len == 0)\n        return result;\n    int index = 0;\n    int product = numbers.get(index);\n    result[0] = product;\n    result[1] = 1;\n    for (index++; index < len; index++) {\n        product *= numbers.get(index);\n        result[0] += product;\n        result[1] *= product;\n    }\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n\n    int len = numbers.size();\n    if (len == 0)\n        return result;\n    int index = 0;\n    int product = numbers.get(index);\n    result[0] += numbers.get(index);\n    result[1] *= numbers.get(index++);\n    for (; index < len; index++) {\n        int n = numbers.get(index);\n        result[0] += n;\n        result[1] *= n;\n    }\n\n    return result;\n}",
        "public static Integer[] sum_product(List<Integer> numbers) {\n    int[] result = new int[2];\n        for (int n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}"
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy lines start\n        running_max = Math.max(running_max, n);\n// buggy lines end\n                result.add(running_max);\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers) {\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Integer.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers) {\n        running_max = Integer.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = integerMax(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers) {\n        running_max = max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers) {\n        running_max = integerMax(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers) {\n        running_max = Integer.MAX_VALUE;\n        if (n != null) {\n            running_max = Math.max(running_max, n);\n        }\n        result.add(running_max);\n    }\n    return result;\n}",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Integer.MAX_VALUE;\n        result.add(running_max);\n    }\n    return result;\n}"
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy lines start\n    result += str.substring(0, beginning_of_suffix);\n// buggy lines end\n        return result;\n}",
      "function range": "12,5-24,5",
      "output": [
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    if (beginning_of_suffix == 0)\n        return result;\n    else {\n        result += str.substring(0, beginning_of_suffix);\n        return result;\n    }\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    if (beginning_of_suffix > 0) {\n        result += str.substring(0, beginning_of_suffix).reverse();\n    } else {\n        result += str.reverse();\n    }\n\n        return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    result += str.substring(0, beginning_of_suffix) + \"String_Node_Str\";\n\n        return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    result += reverse(str.substring(0, beginning_of_suffix));\n\n        return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    for (int i = 0; i < beginning_of_suffix; i++) {\n        result += str.charAt(i);\n    }\n        return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    if (beginning_of_suffix == 0)\n        return result;\n    else {\n        result += reverse(str.substring(0, beginning_of_suffix));\n    }\n        return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    if (beginning_of_suffix == 0) {\n        return result;\n    }\n    String suffix = str.substring(0, beginning_of_suffix);\n    result += suffix.substring(0, suffix.length() / 2);\n    if (suffix.length() % 2 == 1) {\n        result += suffix.charAt(suffix.length() / 2);\n    }\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    if (beginning_of_suffix == 0) {\n        return result;\n    }\n    String suffix = str.substring(0, beginning_of_suffix);\n    if (suffix.length() >= result.length()) {\n        return suffix;\n    }\n    result += suffix;\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    if (beginning_of_suffix == 0)\n        return result;\n    else {\n        result += reverse(str.substring(0, beginning_of_suffix));\n    }\n    return result;\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n\n    if (beginning_of_suffix == 0)\n        return result;\n    else {\n        String suffix = str.substring(0, beginning_of_suffix);\n        result += suffix.substring(0, suffix.length() - 1) + suffix.reverse().substring(0, suffix.length() - 1) + suffix;\n    }\n        return result;\n}"
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy lines start\n    }\n// buggy lines end\n        return result;\n}",
      "function range": "4,5-12,5",
      "output": [
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    result = \"String_Node_Str\" + result.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    result = \"String_Node_Str\" + result;\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    result += \"String_Node_Str\";\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    result = \"String_Node_Str\" + result.substring(1) + \"String_Node_Str\";\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    result = \"String_Node_Str\" + result.substring(1);\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n    result = \"String_Node_Str\" + result + \"String_Node_Str\";\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    }\n        return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n\n    }\n    result = \"String_Node_Str\" + result.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n    return result;\n}",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n\n    }\n    result = \"String_Node_Str\" + result.substring(1);\n    return result;\n}"
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy lines start\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n// buggy lines end\n                }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "function range": "6,5-19,5",
      "output": [
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size() - string.length();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size() - 1;\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen = Math.max(maxlen, string.length());\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length() || string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length(){\n            maxlen = strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxLen = 0;\n    for (String string : strings){\n        if (string.length() > maxLen){\n            maxLen = string.length();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxLen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (strings.size() > string.length()){\n            maxlen =strings.size();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
        "public static String longest(List<String> strings){\n    int maxLen = 0;\n    for (String string : strings) {\n        if (string.length() > maxLen) {\n            maxLen = string.length();\n        }\n    }\n    for (String string : strings) {\n        if (string.length() == maxLen) {\n            return string;\n        }\n    }\n    return null;\n}"
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy lines start\n        a = b;\n        b = a % b;\n// buggy lines end\n            }\n    return a;\n}",
      "function range": "4,5-10,5",
      "output": [
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int c = a;\n        a = b;\n        b = c % b;\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int c = b;\n        b = a % b;\n        a = c;\n        }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        a = Math.max(a, b);\n        b = Math.min(a, b);\n        if (a % b == 0) {\n            return b;\n        }\n        a = a % b;\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        a = greatest_common_divisor(a, b);\n        b = greatest_common_divisor(b, a);\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int c = a;\n        a = b;\n        b = c % a;\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int c = b;\n        b = a % b;\n        a = c;\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int c = a;\n        a = b;\n        b = c % a;\n        }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        a = Math.max(a, b);\n        b = Math.min(a, b);\n        if (a % b == 0) {\n            return b;\n        }\n        a -= b;\n    }\n    return a;\n}",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        a = Math.max(a, b);\n        b = Math.min(a, b);\n        if (a % b == 0) {\n            return b;\n        }\n        a %= b;\n    }\n    return a;\n}"
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy lines start\n        result.add(string.substring(i + 1));\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "7,5-15,5",
      "output": [
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i));\n        }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n\n        result.add(string.substring(i));\n\n            }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1));\n        }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n\n        result.add(string.substring(i));\n\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i + 1));\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(i));\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n\n        result.add(string.substring(i));\n\n        }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(0, i + 1));\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        result.add(string.substring(0, i));\n    }\n    return result;\n}",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n\n        result.add(string.substring(0, i + 1));\n\n    }\n    return result;\n}"
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy lines start\n    return result;\n// buggy lines end\n    }",
      "function range": "4,5-10,5",
      "output": [
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n\n    return result.substring(0, n + 1);\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n\n    if (result.length() > 0) {\n        result = result.substring(0, result.length() - 1);\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n\n    return result.substring(0, result.length() - 1);\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n\n    result = result.substring(0, result.length() - 1);\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n\n    if (result.length() >= 2) {\n        result = result.substring(0, result.length() - 2);\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1) {\n        result += i + \" \";\n    }\n\n    if (result.length() > 0) {\n        result = result.substring(0, result.length() - 1);\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n\n    if (result.length() > 0) {\n        result = result.subSequence(0, result.length() - 1);\n    }\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n\n    return result.trim();\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n\n    return result.substring(0, n+1);\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += i + \" \";\n    }\n    return result.substring(0, n + 1);\n}"
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy lines start\n            distinct.add(c);\n// buggy lines end\n                }\n    return distinct.size();\n}",
      "function range": "6,5-14,5",
      "output": [
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n        }\n    return distinct.size();\n}",
        "public static int count_distinct_character_lowercase(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n        }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_character_case_insensitive(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n        }\n    return distinct.size();\n}",
        "public static int count_distinct_character_with_lowercase(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n        }\n    return distinct.size();\n}",
        "public static int count_distinct_character_cases(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n        }\n    return distinct.size();\n}",
        "public static int count_distinct_character_codes(String string) {\n    HashSet<Integer> distinct = new HashSet<Integer>();\n    for (int c : string.toCharArray()) {\n        if (! distinct.contains(c)) {\n            distinct.add(c);\n        }\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_character_with_case(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(c)) {\n            distinct.add(c);\n        }\n    }\n    return distinct.size();\n}",
        "public static int count_distinct_character_ignore_case(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n        }\n    return distinct.size();\n}",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(c);\n        }\n    }\n    return distinct.size();\n}"
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy lines start\n    for (String note : music_string.split(\" \")){\n// buggy lines end\n            result.add(note_map.get(note));\n    }\n    return result;\n}",
      "function range": "8,5-20,5",
      "output": [
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note.equals(\"String_Node_Str\")) {\n            result.add(note_map.get(\"String_Node_Str\"));\n        } else {\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note.equals(\"String_Node_Str\")) {\n            note = \"String_Node_Str\";\n        }\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (!note.equals(\"String_Node_Str\")) {\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note.equals(\"String_Node_Str\")) {\n            note = \"String_Node_Str\";\n        } else if (note.equals(\"String_Node_Str\")) {\n            note = \"String_Node_Str\";\n        } else if (note.equals(\"String_Node_Str\")) {\n            note = \"String_Node_Str\";\n        }\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note.equals(\"String_Node_Str\")) {\n            note_map.put(\"String_Node_Str\", 0);\n        }\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note.equals(\"String_Node_Str\")) {\n            note = \"String_Node_Str\";\n        } else {\n            note = note.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n        }\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note.equals(\"String_Node_Str\")) {\n            note = \"o\";\n        }\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note.equals(\"String_Node_Str\")) {\n            note = \"String_Node_Str\";\n        } else if (note.equals(\"String_Node_Str\")) {\n            note = \"String_Node_Str\";\n        } else {\n            note = note.substring(0, note.length() - 1);\n        }\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (String note : music_string.split(\" \")) {\n        if (note.equals(\"String_Node_Str\")) {\n            result.add(note_map.get(note));\n        } else {\n            result.add(Integer.valueOf(note));\n        }\n    }\n    return result;\n}"
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy lines start\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy lines end\n            if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "function range": "4,5-12,5",
      "output": [
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i + substring.length() <= string.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    int index = string.indexOf(substring);\n    while (index != -1) {\n        times += 1;\n        index = string.indexOf(substring, index + 1);\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    for (int i = 0; i <= string.length() - substring.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times += 1;\n        }\n    }\n    return times;\n}",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n\n    int idx = string.indexOf(substring);\n    while (idx != -1) {\n        times += 1;\n        idx = string.indexOf(substring, idx + 1);\n    }\n    return times;\n}"
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy lines start\n    Collections.sort(number_array);\n// buggy lines end\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "function range": "6,5-27,5",
      "output": [
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String a, String b) {\n            return Integer.compare(value_map.get(a), value_map.get(b));\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String a, String b) {\n            return value_map.get(a) - value_map.get(b);\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String s1, String s2) {\n            return value_map.get(s1) - value_map.get(s2);\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String o1, String o2) {\n            return value_map.get(o1) - value_map.get(o2);\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String s1, String s2) {\n            return Integer.compare(value_map.get(s1), value_map.get(s2));\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String a, String b) {\n            return Integer.valueOf(value_map.get(a)) - Integer.valueOf(value_map.get(b));\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String o1, String o2) {\n            return Integer.compare(value_map.get(o1), value_map.get(o2));\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String a, String b) {\n            return Integer.parseInt(a) - Integer.parseInt(b);\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String s1, String s2) {\n            return Integer.valueOf(value_map.get(s1)).compareTo(value_map.get(s2));\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String a, String b) {\n            return Integer.valueOf(a).compareTo(Integer.valueOf(b));\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}"
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy lines start\n        for (int j = 0; j < numbers.length; j += 1){\n// buggy lines end\n                    double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-24,5",
      "output": [
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n\n        for (int j = i + 1; j < numbers.length; j += 1){\n\n                    double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n                    double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        for (int j = i + 1; j < numbers.length; j += 1){\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n\n        int startIndex = (i > 0) ? i - 1 : 0;\n        for (int j = startIndex; j < numbers.length; j += 1){\n\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance) {\n                distance = new_distance;\n                if (numbers[i] < numbers[j]) {\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else {\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n\n        int j = i + 1;\n        if (j >= numbers.length)\n            j = 0;\n        \n                    double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n\n        int startIndex = (i > 0) ? i - 1 : 0;\n        for (int j = startIndex; j < numbers.length; j += 1){\n\n                    double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n\n        int j = i + 1;\n        if (j >= numbers.length) {\n            j = 0;\n        }\n        while (j != i) {\n\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n            j++;\n            if (j == numbers.length) {\n                j = 0;\n            }\n\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n                    double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance) {\n                distance = new_distance;\n                if (numbers[i] < numbers[j]) {\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else {\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance) {\n                distance = new_distance;\n                if (numbers[i] < numbers[j]) {\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else {\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy lines start\n        else if (numbers[i] < min) {\n// buggy lines end\n                    min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "function range": "4,5-22,5",
      "output": [
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < 0) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (-numbers[i] < min) {\n            min = -numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n            else if (numbers[i] < 0) {\n                    min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n            else if (numbers[i] < 0) {\n                min = numbers[i];\n            }\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n            else if (numbers[i] < 0) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    else if (numbers[i] < 0) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n                else if (numbers[i] < 0) {\n                    min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if (numbers[i] < 0.0) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}"
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy lines start\n        result.add((Integer) value);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add(((Number) value).intValue());\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add(Integer.valueOf(value.toString()));\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Number) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Number) value).intValue());\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values) {\n        result.add(((Number) value).intValue());\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values) {\n        result.add(Integer.valueOf(value.toString()));\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Integer) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add(((Number) value).integerValue());\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add((Boolean) value);\n    }\n    return result;\n}",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        result.add(Integer.valueOf((String) value));\n    }\n    return result;\n}"
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n// buggy lines start\n    return string.length() - 1;\n// buggy lines end\n    }",
      "function range": "4,5-6,5",
      "output": [
        "public static int strlen(String string){\n    return string.length() - 2;\n}",
        "public static int strlen(String string){\n    return string.length() - 1;\n}",
        "public static int strlen(String string) {\n    return string.length() - 1;\n}",
        "public static int strlen(String string){\n    return string.length();\n}",
        "public static int strlen(String string) {\n    return string.length() - 2;\n}",
        "public static int strlen(String string){\n    return string.length() - 1 - 1;\n}",
        "public static int strlen(String string){\n    return string.length() - 1 + 1;\n}",
        "public static int strlen(String string){\n    return string.length() - 3;\n}",
        "public static int strlen(String string){\n    return string.length() + 1;\n}",
        "public static int strlen(String string){\n    returnstring.length() - 1;\n}"
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n// buggy lines start\n    for (int i = n; i >= 0; i -= 1){\n// buggy lines end\n            if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "function range": "4,5-10,5",
      "output": [
        "public static int largest_divisor(int n) {\n\n    for (int i = n; i >= 1; i--){\n\n            if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n\n    for (int i = n; i >= 1; i--) {\n\n            if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n\n    for (int i = n; i > 0; i--){\n\n            if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n\n    for (int i = n; i >= 1; i -= 1){\n\n            if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 1; i--) {\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n    for (int i = n; i >= 1; i--){\n        if (n % i == 0)\n        return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n\n    for (int i = n; i >= 1; i--) {\n\n        if (n % i == 0)\n        return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n\n    for (int i = n; i >= 1; i -= 1) {\n\n        if (n % i == 0)\n        return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n\n    for (int i = n; i >= 1; i -= 1) {\n\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
        "public static int largest_divisor(int n) {\n\n    for (int i = n; i >= 1; i -= 1) {\n\n            if (n % i == 0)\n            return i;\n    }\n    return 1;\n}"
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy lines start\n    return result;\n// buggy lines end\n    }",
      "function range": "7,5-21,5",
      "output": [
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    result.add(n);\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    if (n > 1)\n        result.add(n);\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    if (n > 1) {\n        result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    if (n > 1) {\n        result.add(n);\n    }\n\n    return result;\n}",
        "public static List<Integer> factorize(int n) {\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    result.add(n);\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    result.add(n);\n   return result;\n}",
        "public static List<Integer> factorize(int n) {\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    if (n > 1)\n        result.add(n);\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    while (n > 1) {\n        result.add(n);\n        n /= n;\n    }\n    return result;\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    if (n > 1) {\n        result.add(n);\n    }\n    \n    return result;\n}",
        "public static List<Integer> factorize(int n) {\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n\n    if (n > 1) {\n        result.add(n);\n    }\n    return result;\n}"
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy lines start\n        count.put(n, count.get(n) + 1);\n// buggy lines end\n            }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "function range": "8,5-22,5",
      "output": [
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)) {\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, getOrDefault(count, n, 0) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.getOrDefault(n, 0) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, getCount(count, n));\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (int n : numbers){\n        count.put(n, count.getOrDefault(n, 0) + 1);\n    }\n    for (int n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (!count.containsKey(n)) {\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.putIfAbsent(n, 0);\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (int n : numbers){\n        count.put(n, getOrDefault(count, n, 0) + 1);\n    }\n    for (int n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (int n : numbers){\n        count.put(n, count.get(n) + 1);\n    }\n    for (int n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, get_count(count, n));\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}"
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy lines start\n            char_list[i] = Character.toLowerCase(c);\n        }\n        else {\n            char_list[i] = Character.toUpperCase(c);\n// buggy lines end\n                    }\n    }\n    return new String(char_list);\n}",
      "function range": "4,5-17,5",
      "output": [
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)){\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLetter(c)) {\n            if (Character.isLowerCase(c)) {\n                char_list[i] = Character.toUpperCase(c);\n            }\n            else {\n                char_list[i] = Character.toLowerCase(c);\n            }\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1) {\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLetter(c)) {\n            if (Character.isLowerCase(c)) {\n                char_list[i] = Character.toLowerCase(c);\n            }\n            else {\n                char_list[i] = Character.toUpperCase(c);\n            }\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLetter(c)) {\n            char_list[i] = Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n        else {\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLetter(c)) {\n            char_list[i] = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n}"
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n// buggy lines start\n    String result = null;\n// buggy lines end\n        for (String string : strings)\n        result += string;\n    return result;\n}",
      "function range": "4,5-9,5",
      "output": [
        "public static String concatenate(String[] strings) {\n\n    String result = \"\";\n\n        for (String string : strings)\n        result += string;\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n\n    String result = null;\n\n    for (String string : strings)\n        result += string;\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n\n    StringBuilder result = new StringBuilder();\n\n        for (String string : strings)\n        result.append(string);\n    return result.toString();\n}",
        "public static String concatenate(String[] strings) {\n\n    String result = null;\n    for (int i = 0; i < strings.length; i++) {\n        result += strings[i];\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n\n    String result = null;\n\n    for (String string : strings) {\n        result += string;\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n\n    String result = strings[0];\n\n        for (int i = 1; i < strings.length; i++)\n        result += strings[i];\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n\n    String result = null;\n    for (String string : strings) {\n        if (result == null) {\n            result = string;\n        } else {\n            result += string;\n        }\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n\n    String result = null;\n    for (String string : strings) {\n        result += string;\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n\n    String result = null;\n    boolean first = true;\n    for (String string : strings) {\n        if (!first)\n            result += \"String_Node_Str\";\n        result += string;\n        first = false;\n    }\n    return result;\n}",
        "public static String concatenate(String[] strings) {\n\n    String result = strings[0];\n    for (int i = 1; i < strings.length; i++)\n        result += strings[i];\n    return result;\n}"
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy lines start\n        if (string.startsWith(prefix, 1)){\n// buggy lines end\n                    result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix)){\r\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings) {\n        if (string.startsWith(prefix)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1) && !string.equals(prefix)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix)){\r\n                result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 1)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix))}{\n            result.add(string);\n        }\n    }\n    return result;\n}",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        if (string.startsWith(prefix, 0)){\n            result.add(string);\n        }\n    }\n    return result;\n}"
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy lines start\n        result.add(number);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n        }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0)\n            result.add(number);\n        else\n            result.add(0);\n        }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n            }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0)\n            result.add(number);\n        }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0)\n            result.add(number);\n        else\n            result.add(0);\n            }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0)\n            result.add(number);\n        else\n            result.add(0);\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0)\n            result.add(number);\n        else\n            return null;\n    }\n    return result;\n}",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number >= 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}"
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy lines start\n    for (int k = 0; k < n; k += 1){\n// buggy lines end\n            if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "function range": "4,5-12,5",
      "output": [
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    for (int k = 0; k <= n; k += 1){\n\n            if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    int sqrt_n = (int) Math.sqrt(n);\n    for (int k = 0; k <= sqrt_n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    for (int k = 0; k <= n; k += 1){\n\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    for (int k = 0; k <= n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    int sqrt_n = (int) Math.sqrt(n);\n    for (int k = 0; k <= sqrt_n; k += 1) {\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    int sqrt_n = (int) Math.sqrt(n);\n    for (int k = 0; k <= sqrt_n; k++) {\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    int sqrt_n = (int) Math.sqrt(n);\n    for (int k = 0; k < sqrt_n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    if (n < 3)\n        return true;\n    for (int k = 3; k <= n; k += 2){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n\n    int sqrt_n = (int) Math.sqrt(n);\n    for (int k = 0; k < sqrt_n; k += 1) {\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy lines start\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n// buggy lines end\n                    begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "function range": "14,5-32,5",
      "output": [
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        double sign = poly(xs, center);\n        if (Math.abs(sign) < 1e-10) {\n            return center;\n        } else if (sign < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        int sign = poly(xs, center);\n        if (sign * poly(xs, begin) >= 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        double p = poly(xs, center);\n        if (p * poly(xs, begin) >= 0) {\n            begin = center;\n        } else if (p * poly(xs, end) >= 0) {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        double p = poly(xs, center);\n        if (p * poly(xs, begin) < 0) {\n            begin = center;\n        } else if (p * poly(xs, end) < 0) {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        double p = poly(xs, center);\n        if (Math.abs(p) < 1e-30) {\n            return center;\n        } else if (p < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        double pbegin = poly(xs, begin);\n        double pend = poly(xs, end);\n        if (pbegin * pend < 0) {\n\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        int sign = poly(xs, center);\n        if (Math.abs(sign) < 1e-10) {\n            return center;\n        } else if (sign > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        double sign = poly(xs, center);\n        if (Math.abs(sign) < 1e-10) {\n            return center;\n        } else if (sign > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        double s = poly(xs, begin);\n        if (s * poly(xs, center) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n\n        double h1 = poly(xs, begin);\n        double h2 = poly(xs, end);\n        if (h1 * h2 < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}"
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy lines start\n            result.add(thirds.get(i));\n// buggy lines end\n                    } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "function range": "8,5-25,5",
      "output": [
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i % thirds.size()));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get((i / 3) % thirds.size()));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i % thirds.size()));\n                    } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3) {\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1) {\n        if (i % 3 == 0) {\n            result.add(thirds.get(i / 3));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(--i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            if (i != 0) {\n                result.add(thirds.get(i - 1));\n            } else {\n                result.add(thirds.get(i));\n            }\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(thirds.size() - 1 - i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    int k = 0;\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(k++));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    int k = 0;\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(k));\n            k++;\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            if (thirds.size() > 0){\n                result.add(thirds.get(0));\n                thirds.remove(0);\n            } else {\n                result.add(l.get(i));\n            }\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}"
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy lines start\n        result.add(n);\n// buggy lines end\n            }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "8,5-17,5",
      "output": [
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        if (!result.contains(n))\n            result.add(n);\n        }\n    Collections.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        if (!result.contains(n))\n            result.add(n);\n        }\n    Collections.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        if (!result.contains(n))\n            result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        if(!result.contains(n))\n            result.add(n);\n        }\n    Collections.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        if (!result.contains(n))\n            result.add(n);\n            }\n    Collections.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        if (!result.contains(n)) {\n            result.add(n);\n        }\n        }\n    Collections.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        if (!result.contains(n))\n            result.add(n);\n        }\n    Collications.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<>();\n    for (Integer n : l) {\n        if (!result.contains(n))\n            result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int n : l) {\n        result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int n : l){\n        result.add(n);\n            }\n    Collections.sort(result);\n    return result;\n}"
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n// buggy lines start\n    int m = 0;\n// buggy lines end\n        for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "function range": "6,5-14,5",
      "output": [
        "public static int max_element(List<Integer> l) {\n    int m = l.get(0);\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "public static int max_element(List<Integer> l) {\n\n    int m = l.get(0);\n\n        for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
        "public static int max_element(List<Integer> l) {\n\n    int m = Integer.MIN_VALUE;\n\n        for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
        "public static int max_element(List<Integer> l) {\n    int m = Integer.MIN_VALUE;\n        for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
        "public static int max_element(List<Integer> l) {\n    int m = 0;\n\n    for (int e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "public static int max_element(List<Integer> l) {\n\n    int max = 0;\n\n        for (Integer e : l) {\n        if (e > max){\n            max = e;\n        }\n    }\n    return max;\n}",
        "public static int max_element(List<Integer> l) {\n    int m = 0;\n\n    for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}",
        "public static int max_element(List<Integer> l) {\n    int m = l.get(0);\n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
        "public static int max_element(List<Integer> l) {\n    int m = -1;\n        for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
        "public static int max_element(List<Integer> l) {\n\n    int m = l.get(0);\n\n        for (Integer e : l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n    return m;\n}"
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy lines start\n            for (int j = 0; j < i + \"\".length(); j += 1){\n                if (i + \"\".substring(j, j + 1) == \"7\")\n// buggy lines end\n                                result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-16,5",
      "output": [
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < Integer.toString(i).length(); j += 1){\n                if (Integer.toString(i).substring(j, j + 1) == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < String.valueOf(i).length(); j += 1){\n                if (String.valueOf(i).substring(j, j + 1) == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < (i + \"\").length(); j += 1){\n                if ((i + \"\").substring(j, j + 1) == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < (i + \"\").length(); j += 1){\n                if ((i + \"\".substring(j, j + 1)) == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < Integer.toString(i).length(); j += 1){\n                if (Integer.toString(i).substring(j, j + 1) == \"7\"){\n                    result += 1;\n                }\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < Math.min(i + \"\".length(), 7); j += 1){\n                if (i + \"\".substring(j, j + 1) == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < Math.min(i + \"\".length(), k); j += 1){\n                if (i + \"\".substring(j, j + 1) == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < Math.min((i + \"\").length(), k); j += 1){\n                if (i + \"\".substring(j, j + 1) == k)\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < (i + \"\").length(); j += 1){\n                if ((i + \"\".substring(j, j + 1)).length() == 1 && (i + \"\".substring(j, j + 1)) == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            for (int j = 0; j < (\"\" + i).length(); j += 1){\n                if (\"\" + i + \"\".substring(j, j + 1) == \"7\")\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy lines start\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n// buggy lines end\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "function range": "6,5-22,5",
      "output": [
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[(int) (l.length / 2.)];\n\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[(int) (l.length / 2.)];\n\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[(int) (l.length / 2)];\n\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[(int) (l.length / 2.]);\n\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[(int) (l.length / 2.)];\n\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i ++) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[1 + (int) Math.ceil((double) l.length / 2.)];\n\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[Math.ceilDivide(l.length, 2.)];\n\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[1 + (int) (l.length / 2.)];\n\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] evens = new int[(int) Math.ceil((double) l.length / 2.)];\n\n        for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n\n    int[] even = new int[(int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i += 2) {\n        even[(int) i / 2] = l[i];\n    }\n    Arrays.sort(even);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = even[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}"
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy lines start\n    for (int i = 0; i < s.length(); i += 3){\n// buggy lines end\n            groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "function range": "8,13-26,13",
      "output": [
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    List<String> groups = new ArrayList<>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length() - 2; i += 3){\n            groups.add(s.substring(i, i + 3));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups) {\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0) {\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    List<String> groups = new ArrayList<>();\n\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups) {\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0) {\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length() - 2; i += 3){\n        groups.add(s.substring(i, i + 3));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<>();\n\n    for (int i = 0; i < s.length(); i += 3) {\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups) {\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0) {\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n   ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length()-2; i += 3){\n            groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
        "String encode_cyclic(String s) {\n    List<String> groups = new ArrayList<String>();\n\n    for (int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}"
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy lines start\n        fib.add(fib.get(len - 1) + fib.get(len));\n        if (is_prime(fib.get(len - 1)))\n// buggy lines end\n                    n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "function range": "16,5-29,5",
      "output": [
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num)) {\n            fib.add(num);\n        }\n        if (is_prime(fib.get(len - 1)))\n\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num)) {\n            fib.add(num);\n            if (--n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num))\n\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num)) {\n            fib.add(num);\n        }\n        if (is_prime(fib.get(len - 1))) {\n            n -= 1;\n        }\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num)) {\n            n -= 1;\n        }\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num)) {\n            fib.add(num);\n            if (--n == 0)\n                return num;\n        }\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num)) {\n            fib.add(num);\n        }\n        if (is_prime(fib.get(len - 1)))\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        int num = fib.get(len - 1) + fib.get(len);\n        if (is_prime(num)) {\n            fib.add(num);\n        }\n        if (is_prime(fib.get(len - 1))) {\n            n -= 1;\n        }\n        if (n == 0) {\n            return fib.get(fib.size() - 1);\n        }\n    }\n}",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n\n        int last = fib.get(len - 1);\n        int prev = fib.get(len - 2);\n        int next = last + prev;\n        if (next < 0)\n            break;\n        fib.add(next);\n        if (is_prime(last))\n\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}"
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy lines start\n        for (int j = i; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n// buggy lines end\n                        if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "21,5-31,5",
      "output": [
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n\n        for (int j = i + 1; j < numbers.length - 1; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n\n                        if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                        if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n\n        for (int j = i + 1; j < numbers.length - 1; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length - 1; j += 1) {\n            for (int k = j; k < numbers.length - 1; k += 1) {\n                        if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length - 1; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n\n                        if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length - 1; j += 1) {\n            for (int k = j; k < numbers.length - 1; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i; j < numbers.length - 1; j += 1) {\n            for (int k = j; k < numbers.length; k += 1) {\n                        if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n\n        int a = numbers[i];\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            int b = numbers[j];\n            for (int k = j; k < numbers.length; k += 1) {\n                int c = numbers[k];\n\n                if (a + b + c == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}"
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n// buggy lines start\n    return n;\n// buggy lines end\n    }",
      "function range": "14,5-16,5",
      "output": [
        "public static int car_race_collision(int n) {\n    return n + 1;\n}",
        "public static int car_race_collision(int n) {\n\n    int count = 0;\n    boolean add = true;\n    for (int i = 0; i < n; i++) {\n        if (add) {\n            count++;\n        } else {\n            count--;\n        }\n        add = !add;\n    }\n    return count;\n\n}",
        "public static int car_race_collision(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n;\n    }\n}",
        "public static int car_race_collision(int n) {\n\n    return n + 1;\n\n    }",
        "public static int car_race_collision(int n) {\n\n    int count = 0;\n    int current = n;\n    while (current > 1) {\n        if (current % 2 == 0) {\n            current /= 2;\n        } else {\n            current = 2 * current + 1;\n        }\n        count++;\n    }\n    return count;\n\n    }",
        "public static int car_race_collision(int n) {\n\n    int count = 0;\n    int current = n;\n    while (current > 1) {\n        if (current % 2 == 0) {\n            current /= 2;\n        } else {\n            current = 2 * current + 1;\n        }\n        ++count;\n    }\n    return count;\n\n    }",
        "public static int car_race_collision(int n) {\n\n    int count = 0;\n    boolean add = true;\n    for (int i = 0; i < n; i++) {\n        if (add) {\n            count++;\n            add = false;\n        } else {\n            count--;\n            add = true;\n        }\n    }\n    return count;\n\n    }",
        "public static int car_race_collision(int n) {\n\n    int count = 0;\n    boolean add = true;\n    for (int i = 0; i < n; i++) {\n        if (add) {\n            count++;\n            add = false;\n        } else {\n            count--;\n            add = true;\n        }\n    }\n    return count;\n\n}",
        "public static int car_race_collision(int n) {\n\n    int count = 0;\n    boolean add = true;\n    for (int i = 0; i < n; i++) {\n        if (add) {\n            count++;\n        } else {\n            count--;\n        }\n        add = !add;\n    }\n    return count;\n\n    }",
        "public static int car_race_collision(int n) {\n\n    int count = 0;\n    int current = n;\n    while (current > 1) {\n        if (current % 2 == 0) {\n            current /= 2;\n        } else {\n            current = 3 * current + 1;\n        }\n        ++count;\n    }\n    return count;\n\n    }"
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy lines start\n        result.add(n - 1);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "13,5-20,5",
      "output": [
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n + 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n + 1);\n            }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n + 1);\n        }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new LinkedList<Integer>();\n    for (Integer n : l) {\n        result.add(n + 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<>();\n    for (Integer n : l) {\n        result.add(n + 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int n : l) {\n        result.add(n + 1);\n    }\n    return result;\n}",
        "public static List< Integer > incr_list(List< Integer > l) {\n    List< Integer > result = new ArrayList< Integer >();\n    for (Integer n : l) {\n        result.add(n + 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n+1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n + 1);\n    }\n    return result;\n}",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = newArrayList();\n    for (Integer n : l) {\n        result.add(n + 1);\n    }\n    return result;\n}"
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy lines start\n        for (int j = 0; j < l.size(); j += 1){\n// buggy lines end\n                    if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "10,5-18,5",
      "output": [
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1){\n                    if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = 0; j < l.size(); j++) {\n            if (i != j && l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1){\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i++) {\n        int a = l.get(i);\n        for (int j = 0; j < l.size(); j++) {\n            if (i != j) {\n                int b = l.get(j);\n                if (a + b == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for (int j = i + 1; j < l.size(); j += 1) {\n                    if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i++) {\n        int a = l.get(i);\n        for (int j = 0; j < l.size(); j++) {\n            if (i == j)\n                continue;\n            int b = l.get(j);\n            if (a + b == 0)\n                return true;\n        }\n    }\n    return false;\n}"
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy lines start\n        result = result + x % base;\n        x = x - x / base;\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (x % base) + result;\n        x = x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (result + x % base).substring(0,2);\n        x = x - x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (result + x % base).substring(0, 2);\n        x = x - x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (result + x % base);\n        x = x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (x % base) + result;\n        x /= base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (result + x % base).substring(0, 2);\n        x = x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (result + x % base).substring(0,2);\n        x = x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = (result + x % base).toString();\n        x = x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n}",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = digit(x % base) + result;\n        x = x / base;\n    }\n    return result;\n}"
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n// buggy lines start\n    return a * h;\n// buggy lines end\n    }",
      "function range": "8,5-10,5",
      "output": [
        "public static double triangle_area(double a, double h) {\n    return 0.5 * a * h;\n}",
        "public static double triangle_area(double a, double h) {\n    return 0.5d * a * h;\n}",
        "public static double triangle_area(double a, double h) {\n    return 0.5 * a * h;\n    }",
        "public static double triangle_area(double a, double h) {\n    return (a * h) / 2;\n}",
        "public static doubletriangle_area(double a, double h) {\n    return 0.5 * a * h;\n}",
        "public static double triangle_area(double a, double h) {\n    return a * h / 2;\n}",
        "public static double triangle_area(double a, double h) {\n\n    return 0.5 * a * h;\n\n    }",
        "public static double triangle_area(double a, double h) {\n    return 0.5 *a * h;\n}",
        "public static double triangle_area(double a, double h) {\n    return a * h;\n}",
        "public static double triangle_area(double a, double h) {\n  return 0.5 * a * h;\n}"
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy lines start\n    }\n// buggy lines end\n        return result.get(result.size() - 1);\n}",
      "function range": "20,5-35,5",
      "output": [
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.set(3, result.get(0) + result.get(1) + result.get(2) + result.get(3));\n        result.set(0, result.get(1));\n        result.set(1, result.get(2));\n        result.set(2, result.get(3));\n    }\n    return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.set(\n            3,\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.set(0, result.get(1));\n        result.set(1, result.get(2));\n        result.set(2, result.get(3));\n    }\n    return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.set(3, result.get(0) + result.get(1) + result.get(2) + result.get(3));\n        result.set(0, result.get(1));\n        result.set(1, result.get(2));\n        result.set(2, result.get(3));\n    }\n    return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(result.size() - 1) % k;\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i++) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.set(\n            3,\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.set(0, result.get(1));\n        result.set(1, result.get(2));\n        result.set(2, result.get(3));\n    }\n    return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.set(3, result.get(0) + result.get(1) + result.get(2) + result.get(3));\n        result.set(0, result.get(1));\n        result.set(1, result.get(2));\n        result.set(2, result.get(3));\n    }\n        return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.set(\n            3,\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.set(\n            0,\n            result.get(1)\n        );\n        result.set(\n            1,\n            result.get(2)\n        );\n        result.set(\n            2,\n            result.get(3)\n        );\n    }\n    return result.get(result.size() - 1);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(result.size() - 1) % k;\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(result.size() - 1);\n}"
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy lines start\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n// buggy lines end\n            }\n}",
      "function range": "12,5-20,5",
      "output": [
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2d;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2.0;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2.0;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1]) / 2d;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    int length = list.length;\n    if (length % 2 == 1) {\n        return list[(int) (length / 2)];\n    } else {\n        return list[(int) (length / 2)] + list[(int) (length / 2) + 1] / 2.0;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    int length = list.length;\n    if (length % 2 == 1) {\n        return list[(int) (length / 2)];\n    } else {\n        return (list[(int) (length / 2)] + list[(int) (length / 2) + 1]) / 2.0;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1) / 2d;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1) / 2.0;\n    }\n}",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1] / 2;\n    }\n}"
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy lines start\n        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n    }\n    return false;\n// buggy lines end\n        }",
      "function range": "14,5-20,5",
      "output": [
        "public static boolean is_palindrome(String text) {\n    if (text == null)\n        return false;\n    if (text.length() == 0)\n        return true;\n    for (int i = 0; i < text.length(); i++) {\n        if (text.charAt(i) != text.charAt(text.length() - 1 - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    if (text == null)\n        return false;\n    if (text.length() == 0)\n        return true;\n    for (int i = 0; i < text.length(); i += 1) {\n        if (text.charAt(i) != text.charAt(text.length() - 1 - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    if (text == null)\n        return false;\n    if (text.length() == 0)\n        return true;\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i) != text.charAt(text.length() - 1 - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1) {\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n\n        if (text.charAt(i) != text.charAt(text.length() - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n\n        if (text.charAt(i) != text.charAt(text.length() - 1 - i))\n            return false;\n\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1) {\n        if (text.charAt(i) != text.charAt(text.length() - 1 - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n\n        if (text.charAt(i) != text.charAt(text.length() - i - 1))\n            return false;\n\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    if (text == null)\n        return false;\n    for (int i = 0; i < text.length(); i += 1) {\n        if (text.charAt(i) != text.charAt(text.length() - 1 - i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n\n        if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n            return false;\n        }\n\n    }\n    return true;\n}"
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy lines start\n        result = 2 * result;\n    }\n    return result % p;\n// buggy lines end\n        }",
      "function range": "16,5-22,5",
      "output": [
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1) {\n        result = 2 * result % p;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result % p;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1) {\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = 2 * result % p;\n    }\n    return result;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1) {\n        result = 2 * result % p;\n    }\n    return result;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1) {\n        result = result * 2 % p;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = 2 * result;\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1) {\n        result = Math.max(2 * result, 1);\n    }\n    return result % p;\n}",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i++) {\n        result = 2 * result % p;\n    }\n    return result % p;\n}"
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy lines start\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy lines end\n                sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-23,5",
      "output": [
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a') + 26);\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a') + 32);\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char) ((c < 'a' ? c + 26 : c));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char) ((c - 'a' - 5) % 26 + 'a');\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char) ((c < 'a' ? c + 26 : c));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')) % 32 + (int)('a');\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char) ((c < 'a' ? c + 26 : c) - 5);\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char) ((c < 'a' ? c + 26 : c)));\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')) % 32 + (int)('A');\n        sb.append(c);\n    }\n    return sb.toString();\n}"
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy lines start\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n// buggy lines end\n                    continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "18,5-26,5",
      "output": [
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == '\u00e4' || c == '\u00f6' || c == '\u00fc')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == '&')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == '\u00e5' || c == '\u00f6' || c == '\u00fc')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' )\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == '\u00e5' || c == '\u00f6' || c == '\u00e4')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == '\u00f6' || c == '\u00e4')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == 'x')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if ('a' <= c && c <= 'u')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == '\u00fc' || c == '\u00f6' || c == '\u00e4')\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}"
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy lines start\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n// buggy lines end\n        }",
      "function range": "10,5-16,5",
      "output": [
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t) {\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] > t)\n            return false;\n    }\n    return true;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] == 0)\n            return true;\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] <= t) {\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t && l[i] > 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] == t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t && l[i] != 0)\n            return true;\n    }\n    return false;\n}",
        "public static booleanbelow_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] <= t)\n            return true;\n    }\n    return false;\n}"
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n// buggy lines start\n    return x | y;\n// buggy lines end\n    }",
      "function range": "10,5-12,5",
      "output": [
        "public static int add(int x, int y) {\n    return x + y;\n}",
        "public static int add(int x, int y) {\n    return x | y | x << 8 | y << 8;\n}",
        "public static int add(int x, int y) {\n    return x | y | z;\n}",
        "public static int add(int x, int y) {\n    return x | y | x | y;\n}",
        "public static int add(int x, int y) {\n    return x | y | x ^ y;\n}",
        "public static int add(int x, int y) {\n    return x | y | x << 8;\n}",
        "public static int add(int x, int y) {\n    return x | y | x & y;\n}",
        "public static int add(int x, int y) {\n    return x | y | 1;\n}",
        "public static int add(int x, int y) {\n    return x ^ y;\n}",
        "public static int add(int x, int y) {\n    return x | y | x;\n}"
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n// buggy lines start\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy lines end\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "function range": "20,5-31,5",
      "output": [
        "public static boolean same_chars(String s0, String s1) {\n    HashSet<Character> set0 = new HashSet<Character>();\n    HashSet<Character> set1 = new HashSet<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    HashMap<Character, Integer> set0 = new HashMap<Character, Integer>();\n    HashMap<Character, Integer> set1 = new HashMap<Character, Integer>();\n\n    for (char c0 : s0.toCharArray()) {\n        if (set0.containsKey(c0)) {\n            set0.put(c0, set0.get(c0) + 1);\n        } else {\n            set0.put(c0, 1);\n        }\n    }\n    for (char c1 : s1.toCharArray()) {\n        if (set1.containsKey(c1)) {\n            set1.put(c1, set1.get(c1) + 1);\n        } else {\n            set1.put(c1, 1);\n        }\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<Character>();\n    Set<Character> set1 = new HashSet<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    if (s0 == null || s1 == null)\n        return false;\n    if (s0.length() != s1.length())\n        return false;\n    for (int i = 0; i < s0.length(); i++) {\n        if (s0.charAt(i) != s1.charAt(i))\n            return false;\n    }\n    return true;\n}",
        "public static boolean same_chars(String s0, String s1) {\n    List<Character> set0 = new ArrayList<Character>();\n    List<Character> set1 = new ArrayList<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    if (s0.length() != s1.length()) {\n        return false;\n    }\n    for (int i = 0; i < s0.length(); i++) {\n        if (s0.charAt(i) != s1.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean same_chars(String s0, String s1) {\n    if (s0.length() != s1.length()) {\n        return false;\n    }\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    if (s0 == null || s1 == null) {\n        return false;\n    }\n    if (s0.length() != s1.length()) {\n        return false;\n    }\n    for (int i = 0; i < s0.length(); i++) {\n        if (s0.charAt(i) != s1.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        if (!set0.contains(c0)) {\n            set0.add(c0);\n        }\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
        "public static boolean same_chars(String s0, String s1) {\n    ArrayList<Character> set0 = new ArrayList<Character>();\n    ArrayList<Character> set1 = new ArrayList<Character>();\n\n    for (char c0 : s0.toCharArray()) {\n        if (c0 != 'String_Node_Str') {\n            set0.add(c0);\n        }\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}"
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n// buggy lines start\n    return fib(n - 1) + fib(n - 2);\n// buggy lines end\n    }",
      "function range": "12,5-14,5",
      "output": [
        "public static int fib(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}",
        "public static int fib(int n) {\n\n    if (n == 0 || n == 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n\n}",
        "public static int fib(int n) {\n\n    if (n == 0 || n == 1)\n        return n;\n    else\n        return fib(n - 1) + fib(n - 2);\n\n    }",
        "public static int fib(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}",
        "public static int fib(int n) {\n\n    if (n == 0 || n == 1)\n        return n;\n    else\n        return fib(n - 1) + fib(n - 2);\n\n}",
        "public static int fib(int n) {\n\n    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n\n}",
        "public static int fib(int n) {\n    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}",
        "public static int fib(int n) {\n    if (n == 0) {\n        return 0;\n    } else if (n == 1 || n == 2) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}",
        "public static int fib(int n) {\n\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n\n}",
        "public static int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}"
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy lines start\n        if (depth >= 0)\n            return true;\n    }\n    return false;\n// buggy lines end\n        }",
      "function range": "16,5-27,5",
      "output": [
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth <= 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth > 0)\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth >= 0 && b != '>')\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth >= 0) {\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth >= 0 && b != ' ')\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth >= 0 && b != '(')\n            return true;\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth >= 0) {\n            if (b == '>')\n                return true;\n        } else {\n            return false;\n        }\n    }\n    return false;\n}",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n\n        if (depth > 0)\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy lines start\n    sorted = l;\n// buggy lines end\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "function range": "14,5-28,5",
      "output": [
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n        reverse_sorted[i] = sorted[l.length - i - 1];\n    }\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n        reverse_sorted[i] = sorted[l.length - i - 1];\n    }\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = Arrays.copyOf(l, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n        reverse_sorted[i] = sorted[sorted.length - i - 1];\n    }\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) {\n        return true;\n    }\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++) {\n        reverse_sorted[i] = sorted[sorted.length - i - 1];\n    }\n\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    sorted = Arrays.copyOf(l, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n\n    System.arraycopy(l, 0, sorted, 0, l.length);\n\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i++)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}"
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n// buggy lines start\n    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy lines end\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "function range": "12,5-29,5",
      "output": [
        "public static int[] common(int[] l1, int[] l2) {\n    HashSet<Integer> common = new HashSet<Integer>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    Set<Integer> common = new HashSet<Integer>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    Set<Integer> common = new HashSet<Integer>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    HashSet<Integer> common = new HashSet<Integer>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n\n    Set<Integer> common = new HashSet<Integer>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    Set<Integer> common = new HashSet<Integer>();\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    Set<Integer> common = new HashSet<Integer>();\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j]) {\n                common.add(l1[i]);\n            }\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    Set<Integer> common = new HashSet<Integer>();\n    for (int i = 0; i < l1.length; i += 1) {\n        for (int j = 0; j < l2.length; j += 1) {\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n\n    HashSet<Integer> common = new HashSet<Integer>();\n\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
        "public static int[] common(int[] l1, int[] l2) {\n    HashSet<Integer> common = new HashSet<Integer>();\n    for (int i = 0; i < l1.length; i++) {\n        for (int j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}"
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy lines start\n        if (is_prime(j)){\n            largest = n % j;\n// buggy lines end\n                }\n    }\n    return largest;\n}",
      "function range": "20,5-28,5",
      "output": [
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        if (is_prime(j) && n % j < largest) {\n            largest = n % j;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        if (is_prime(j) && (n % j < largest)) {\n            largest = n % j;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        if (is_prime(j) && (n % j) < largest) {\n            largest = n % j;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        if (is_prime(j) && (n % j > largest)) {\n            largest = n % j;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        if (is_prime(j) && (n % j) > largest) {\n            largest = n % j;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        int k = n % j;\n        if (k != 0 && is_prime(k)){\n            largest = k;\n\n                }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        if (is_prime(j) && (n % j != 0)) {\n            largest = n % j;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        while (n % j == 0) {\n            n /= j;\n        }\n        if (largest < j) {\n            largest = j;\n        }\n\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        while (n % j == 0) {\n            largest = j;\n            n /= j;\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n\n        int k = n % j;\n        if (k == 0) {\n            largest = j;\n            break;\n        }\n    }\n    return largest;\n}"
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n// buggy lines start\n    return (n + 1) * (n / 2);\n// buggy lines end\n    }",
      "function range": "16,5-18,5",
      "output": [
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2);\n}",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) - 1;\n}",
        "public static int sum_to_n(int n) {\n\n    return (n + 1) * (n / 2) - 1;\n\n    }",
        "public static int sum_to_n(int n) {\n\n    return (n + 1) * (n / 2) + 1;\n\n    }",
        "public static int sum_to_n(int n) {\n\n    return (n + 1) * (n / 2) - 1;\n}",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) - n;\n}",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n / 2) + 1;\n}",
        "public static int sum_to_n(int n) {\n\n    return (n + 1) * (n / 2);\n\n    }\n",
        "public static int sum_to_n(int n) {\n    return (n + 1) * (n + 1);\n}",
        "public static int sum_to_n(int n) {\n\n    return (n + 1) * (n / 2) - n;\n\n    }"
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy lines start\n    for (int i = 0; i < xs.size(); i += 1)\n        result.add(xs.get(i));\n// buggy lines end\n        return result;\n}",
      "function range": "15,5-21,5",
      "output": [
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i += 1) {\n        result.add(xs.get(i + 1) - xs.get(i));\n    }\n    result.add(0);\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i += 1) {\n        int delta = xs.get(i + 1) - xs.get(i);\n        if (delta < 0)\n            result.add(-1);\n        else if (delta > 0)\n            result.add(1);\n        else\n            result.add(0);\n    }\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i++)\n        result.add(xs.get(i + 1) - xs.get(i));\n    result.add(0);\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i++) {\n        result.add(xs.get(i + 1) - xs.get(i));\n    }\n    result.set(result.size() - 1, 0);\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i += 1) {\n        int delta = xs.get(i + 1) - xs.get(i);\n        if (delta < 0)\n            delta += MODERN_DAY_IN_SECONDS;\n        result.add(delta);\n    }\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i += 1)\n        result.add(xs.get(i + 1) - xs.get(i));\n    result.add(0);\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i += 1) {\n        int y = xs.get(i + 1) - xs.get(i);\n        if (y < 0)\n            y += MODERN_DAY_IN_SECONDS;\n        result.add(y);\n    }\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i += 1) {\n        int delta = xs.get(i + 1) - xs.get(i);\n        if (delta > 0)\n            result.add(delta);\n        else\n            result.add(0);\n    }\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i++) {\n        result.add(xs.get(i + 1) - xs.get(i));\n    }\n    result.add(0);\n\n    return result;\n}",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    for (int i = 0; i < xs.size() - 1; i += 1) {\n        result.add(xs.get(i + 1) - xs.get(i));\n    }\n    return result;\n}"
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy lines start\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n// buggy lines end\n    }",
      "function range": "17,5-23,5",
      "output": [
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3) + 1;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3) - fibfib(n - 4);\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    if (n <= 3)\n        return 0;\n    else\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\n    }",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3) + fibfib(n - 4);\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int x = fibfib(n - 1);\n    int y = fibfib(n - 2);\n    int z = fibfib(n - 3);\n    return x + y + z;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int sum = 0;\n    int a = 0;\n    int b = 0;\n    int c = 1;\n    for (int i = 0; i < n; i++) {\n        sum = a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n    }\n    return sum;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int sum = 0;\n    int a = 0;\n    int b = 0;\n    int c = 1;\n    for (int i = 0; i < n; i++) {\n        sum += a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n    }\n    return sum;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int an = 0;\n    int bn = 1;\n    int fn = 1;\n    for (int i = 0; i < n; i++) {\n        fn = an + bn;\n        an = bn;\n        bn = fn;\n    }\n    return fn;\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    if (n <= 3)\n        return 0;\n    else\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n\n    int x = fibfib(n - 1);\n    System.out.println(\"String_Node_Str\" + n + \"String_Node_Str\" + x);\n    return x + fibfib(n - 2) + fibfib(n - 3);\n}"
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy lines start\n    if (str_chars[str_chars.length - 1] == 'y')\n// buggy lines end\n            result += 1;\n    return result;\n}",
      "function range": "15,5-27,5",
      "output": [
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y' && str_chars[str_chars.length - 2] != 'y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if ((str_chars[str_chars.length - 1] == 'y') && (str_chars[str_chars.length - 2] != 'y'))\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if ((str_chars[str_chars.length - 1] == 'y') && (str_chars[str_chars.length - 2] != 'a'))\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if ((str_chars[str_chars.length - 1] == 'y') && (str_chars[str_chars.length - 2] != 'x'))\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if ((str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y') && str_chars[str_chars.length - 2] != 'i' && str_chars[str_chars.length - 2] != 'I')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y' && str_chars[str_chars.length - 2] != 'i')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if (str_chars[str_chars.length - 1] == 'y' && str_chars[str_chars.length - 2] != 'x')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if ((str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y') && str_chars[str_chars.length - 2] != 'y' && str_chars[str_chars.length - 2] != 'Y')\n        result += 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if ((str_chars[str_chars.length - 1] == 'y') && (str_chars[str_chars.length - 2] != 'i' && str_chars[str_chars.length - 2] != 'x'))\n        result -= 1;\n    return result;\n}",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n\n    if ((str_chars[str_chars.length - 1] == 'y') && (str_chars[str_chars.length - 2] != 'i' && str_chars[str_chars.length - 2] != 'x'))\n        result += 1;\n    return result;\n}"
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy lines start\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n// buggy lines end\n            }\n}",
      "function range": "12,5-23,5",
      "output": [
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n            }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - shift; i < s.length(); i++)\n            sb.append(s.charAt(i));\n        for (int i = 0; i < s.length() - shift; i++)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        String t = \"\";\n        for (int i = s.length() - shift; i < s.length(); i++)\n            t += s.charAt(i);\n        for (int i = 0; i < s.length() - shift; i++)\n            t += s.charAt(i);\n        return t;\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        String t = s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        if (t.charAt(0) == '0')\n            return t.substring(1);\n        else\n            return t;\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        String t = s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        if (t.length() < 20)\n            return t;\n        else\n            return recursive_circular_shift(x, shift);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        String t = \"\";\n        for (int i = s.length() - shift - 1; i >= 0; i--)\n            t += s.charAt(i);\n        return t + s.substring(0, s.length() - shift);\n    }\n}",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(s.length() - shift + 1) + s.substring(shift);\n    }\n}"
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy lines start\n        if (c == ' ')\n            break;\n// buggy lines end\n                if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
      "function range": "16,5-25,5",
      "output": [
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        if ('0' <= c && c <= '9')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ') {\n            break;\n        }\n        if ('0' <= c && c <= '9') {\n            result += (int) c;\n        } else if ('A' <= c && c <= 'Z') {\n            result += (int) c;\n        }\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n\n            if ('0' <= c && c <= '9')\n                result += (int) c;\n        }\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n\n            if ('0' <= c && c <= '9')\n                result += (int) c;\n        else if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n\n        if ('0' <= c && c <= '9')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n\n            if ('0' <= c && c <= '9')\n            result += (int) c;\n        else if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        else if ('0' <= c && c <= '9')\n            result += (int) c;\n        else if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n        else if ('0' <= c && c <= '9')\n            result += (int) c - '0';\n        else if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ' || c == '\\t')\n            break;\n        if ('0' <= c && c <= '9')\n            result += (int) c;\n    }\n    return result;\n}",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        if (c == ' ')\n            break;\n\n            if ('0' <= c && c <= '9')\n                result += (int) c;\n    }\n    return result;\n}"
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy lines start\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "15,5-23,5",
      "output": [
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result -= Integer.parseInt(str);\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result -= Integer.parseInt(str);\n            }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result -= Integer.parseInt(str);\n        }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= 2 * cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result += cnt;\n        }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result += cnt;\n    }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result -= 2 * cnt;\n        }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n\n        result -= Integer.parseInt(str);\n\n            }\n    return result;\n}",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        int cnt = Integer.parseInt(str);\n        result += cnt;\n            }\n    return result;\n}"
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n// buggy lines start\n    int min_even = 0;\n    int index = 0;\n// buggy lines end\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "function range": "36,5-49,5",
      "output": [
        "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE;\n    int index = -1;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE;\n    int index = -1;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] < 0)\n            continue;\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE;\n    int index = -1;\n\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int minEven = Integer.MAX_VALUE;\n    int index = -1;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < minEven) {\n            minEven = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] { minEven, index };\n}",
        "public static int[] pluck(int[] arr) {\n    int minEven = Integer.MAX_VALUE;\n    int index = -1;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < minEven) {\n            minEven = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {minEven, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE;\n    int index = -1;\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE;\n    int index = -1;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] < 0)\n            continue;\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] { min_even, index };\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE;\n    int index = -1;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] < 0) {\n            continue;\n        }\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] { min_even, index };\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE;\n    int index = -1;\n\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[] {};\n    return new int[] {min_even, index};\n}",
        "public static int[] pluck(int[] arr) {\n    int min_even = Integer.MAX_VALUE;\n    int index = -1;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}"
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy lines start\n    int[] frq = new int[max];\n    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n// buggy lines end\n    return result;\n}",
      "function range": "13,5-26,5",
      "output": [
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i : lst) frq[i] += 1;\n    for (int i = 0; i < frq.length; i++) if (frq[i] >= i) return i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i : lst) frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) return i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i : lst) frq[i] += 1;\n    for (int i = 0; i < frq.length; i++) if (frq[i] > result) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i : lst) frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] > result) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i : lst) frq[i] += 1;\n    for (int i = 0; i < frq.length; i++) if (frq[i] > 0) return i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] freq = new int[max + 1];\n    for (int val : lst) {\n        freq[val] += 1;\n    }\n    for (int i = 0; i < freq.length; i++) {\n        if (freq[i] >= i) {\n            result = i;\n            break;\n        }\n    }\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] freq = new int[max + 1];\n    for (int value : lst) {\n        freq[value] += 1;\n    }\n    for (int i = 0; i < freq.length; i++) {\n        if (freq[i] >= i) {\n            result = i;\n            break;\n        }\n    }\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i : lst) frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] * 2 >= lst.length) return i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i : lst) frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n\n    return result;\n}",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n\n    int[] frq = new int[max + 1];\n    for (int i : lst) frq[i] += 1;\n    for (int i = 0; i < frq.length; i += 1) if (frq[i] > 0) result = i;\n\n    return result;\n}"
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy lines start\n    }\n// buggy lines end\n        return result;\n}",
      "function range": "17,5-29,5",
      "output": [
        "}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        switched = !switched;\n\n    }\n        return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        switched = !switched;\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        switched = !switched;\n\n    }\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        switched = !switched;\n\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        if (result.size() == 2) {\n            return result;\n        }\n\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        if (lst.size() == 1) {\n            result.add(Collections.min(lst));\n            break;\n        }\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        switched = !switched;\n    }\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        if (lst.size() == 1) {\n            result.add(Collections.min(lst));\n            break;\n        }\n\n    }\n\n    return result;\n}",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n\n        if (result.size() > 1 && result.get(result.size() - 1) == result.get(result.size() - 2)) {\n            result.remove(result.size() - 1);\n        }\n\n    }\n\n    return result;\n}"
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n// buggy lines start\npublic static double triangle_area_2(double a, double b, double c) {\n// buggy lines end\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "function range": "16,5-26,5",
      "output": [
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n   BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static doubletriangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return INVALID;\n    }\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static doubletriangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd =BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
        "public static double triangle_area_2(double a, double b, double c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    double s = (a + b + c) / 2.;\n    double result =Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}"
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n// buggy lines start\n    }\n// buggy lines end\n        return true;\n}",
      "function range": "20,5-34,5",
      "output": [
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j]) {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    }\n    if (q[i] % 2 != 0)\n        return false;\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    }\n    if (q[i] != q[j]) return false;\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    }\n    if (q[i] > w) return false;\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    }\n    if (q[i] >= w)\n        return false;\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    }\n    if (q[i] % 2 != 0)   return false;\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    }\n    if (q[i] > w)\n        return false;\n    return true;\n}",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    }\n    if (q[i] > w)        return false;\n    return true;\n}"
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy lines start\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i])\n// buggy lines end\n                result += 1;\n    }\n    return result;\n}",
      "function range": "13,5-21,5",
      "output": [
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] != arr[arr.length - i]) {\n            result++;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] != arr[arr.length - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[(arr.length - i) % arr.length]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[(arr.length - 1) - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length - 1; i += 1) {\n        if (arr[i] != arr[i + 1])\n            result += 1;\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[(arr.length - i - 1)]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            result++;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length / 2; i += 1) {\n        if (arr[i] != arr[arr.length - 1 - i]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] != arr[(arr.length - i) % arr.length])\n            result += 1;\n    }\n    return result;\n}"
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy lines start\n    for (String st : lst1)\n        l2 = st.length();\n// buggy lines end\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "function range": "18,5-29,5",
      "output": [
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n\n    for (String st : lst2)\n        l2 += st.length();\n\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 < l2)\n        return lst2;\n    return lst1;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n\n    for (String st : lst2)\n        l2 = st.length();\n\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 > l2)\n        return lst2;\n    return lst1;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n\n    for (int i = 0; i < lst1.size(); i++) {\n        l2 += lst1.get(i).length();\n    }\n\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 >= l2)\n        return lst1;\n    return lst2;\n}",
        "int l2 = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        l2 += lst1.get(i).length();\n    }\n    if (l1 <= l2) {\n        return lst1;\n    }\n    return lst2;",
        "int l2 = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        l2 += lst1.get(i).length();\n    }"
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy lines start\n            for (int k = j; k < a; j += 1) {\n// buggy lines end\n                            if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "19,5-31,5",
      "output": [
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a; k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            for (int k = j; k < a; k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (j % i != 0) continue;\n            for (int k = j; k < a; k += 1) {\n                if (k % j != 0) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (i * j > a) break;\n            for (int k = j; k < a; k += 1) {\n                if (i * j * k > a) break;\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (i * j == a)\n                return true;\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a && k <= (a / i); k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (j % i != 0) continue;\n            for (int k = j; k < a; k += 1) {\n                if (k % i != 0 && k % j != 0) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a && k <= (a / j); k += 1) {\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (i * j > a) break;\n            for (int k = j; k < a; k += 1) {\n                if (i * j * k > a) break;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            for (int k = j; k < a && k <= (a / i); k += 1) {\n                if (! is_prime(k))\n                    continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}"
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n// buggy lines start\n    int power = 1;\n// buggy lines end\n        while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "function range": "15,5-21,5",
      "output": [
        "public static boolean is_simple_power(int x, int n) {\n\n    int power = n;\n\n        while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n\n    int power = n;\n\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n\n    if (x < 0 || n <= 0) {\n        return false;\n    }\n    int power = 1;\n\n        while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n\n    if (x < 0 || n < 0) {\n        return false;\n    }\n    int power = 1;\n\n        while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n\n    if (x < 0) {\n        return false;\n    }\n    int power = 1;\n\n        while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n\n    int pow = 1;\n\n    while (pow < x) {\n        pow *= n;\n    }\n    return pow == x;\n}",
        "public static boolean is_simple_power(int x, int n) {\n\n    intpower = 1;\n\n        while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}"
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n// buggy lines start\n    double root = Math.pow(a, 1./3);\n// buggy lines end\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "function range": "18,5-24,5",
      "output": [
        "public static boolean iscude(int a) {\n    double root = Math.cbrt(a);\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double delta = 0.0000000001;\n    double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.sqrt(a);\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double delta = 0.1;\n    double root = Math.pow(a, 1./3);\n    boolean isCude = ((int) Math.pow((int) root, 3)) == a;\n    while (!isCude && delta < 1) {\n        root += delta;\n        isCude = ((int) Math.pow((int) root, 3)) == a;\n        delta /= 10;\n    }\n    return isCude;\n}",
        "public static boolean iscude(int a) {\n    double delta = 0.1;\n    double root = Math.pow(a, 1./3);\n    boolean isCude = ((int) Math.pow((int) root, 3)) == a;\n    if (!isCude) {\n        root = Math.pow(a, 1./3) + delta;\n        isCude = ((int) Math.pow((int) root, 3)) == a;\n    }\n    return isCude;\n}",
        "public static boolean iscude(int a) {\n    double sqrt = Math.sqrt(a);\n    BigDecimal bd = BigDecimal.valueOf(sqrt);\n    int round_sqrt = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_sqrt, 2)) == a;\n}",
        "public static boolean iscude(int a) {\n    double delta = 0.1;\n    double root = Math.pow(a, 1./3);\n    boolean isCude = ((int) Math.pow((int) root, 3)) == a;\n    if (!isCude) {\n        root = Math.ceil(root);\n        isCude = ((int) Math.pow((int) root, 3)) == a;\n    }\n    return isCude;\n}",
        "public static boolean iscude(int a) {\n    double sqrt = Math.sqrt(a);\n        BigDecimal bd = BigDecimal.valueOf(sqrt);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
        "public static boolean iscude(int a) {\n    double delta = 0.1;\n    double root = Math.pow(a, 1./3);\n    boolean isCude = ((int) Math.pow((int) root, 3)) == a;\n    if (!isCude) {\n        int round_root = (int) (root + 0.5);\n        isCude = ((int) Math.pow(round_root, 3)) == a;\n    }\n    return isCude;\n}"
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy lines start\n        if (c == '2' || c == '3' || c == '5' || c == '7')\n// buggy lines end\n                    result += 1;\n    }\n    return result;\n}",
      "function range": "21,5-28,5",
      "output": [
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '11')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'a' || c == 'c')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '9' || c == 'a' || c == 'c' || c == 'f')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '9' || c == 'b' || c == 'd' || c == 'f')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '9' || c == 'B' || c == 'D' || c == 'F')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '9' || c == 'a' || c == 'c' || c == 'd')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'a' || c == 'c' || c == 'e' || c == 'f')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '9' || c == 'a' || c == 'c' || c == 'd' || c == 'f')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'a' || c == 'c' || c == 'e' || c == '1')\n            result += 1;\n    }\n    return result;\n}",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == '9' || c == 'b' || c == 'f')\n            result += 1;\n    }\n    return result;\n}"
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n// buggy lines start\n    String result = Integer.toHexString(decimal);\n// buggy lines end\n        return \"db\" + result + \"db\";\n}",
      "function range": "15,5-18,5",
      "output": [
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toBinaryString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toString(decimal, 2);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n    String result = Integer.toBinaryString(decimal);\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.toHexString(decimal).toUpperCase();\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    StringBuilder result = new StringBuilder(Integer.toHexString(decimal));\n    while (result.length() < 8) {\n        result.insert(0, \"0\");\n    }\n    result.insert(0, \"db\");\n    result.append(\"db\");\n    return result.toString();\n\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    StringBuilder result = new StringBuilder(Integer.toHexString(decimal));\n    while (result.length() < 8) {\n        result.insert(0, \"0\");\n    }\n    result.insert(0, \"010\");\n    return \"db\" + result.toString() + \"db\";\n\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    StringBuilder result = new StringBuilder(Integer.toHexString(decimal));\n    while (result.length() < 8) {\n        result.insert(0, \"0\");\n    }\n    result.insert(0, \"db\");\n    result.append(\"db\");\n    return result.toString();\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result =Integer.toBinaryString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    String result = Integer.to BinaryString(decimal);\n\n        return \"db\" + result + \"db\";\n}",
        "public static String decimal_to_binary(int decimal) {\n\n    StringBuilder result = new StringBuilder(Integer.toHexString(decimal));\n    while (result.length() < 8) {\n        result.insert(0, \"0\");\n    }\n    result.insert(0, \"010\");\n    return \"db\" + result.toString() + \"db\";\n}"
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy lines start\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n// buggy lines end\n                    return false;\n    }\n    return true;\n}",
      "function range": "15,5-23,5",
      "output": [
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2))\n\n                    return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) != s.charAt(i + 2))\n\n                    return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) != 'x')\n\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i + 1) == s.charAt(i + 2))\n\n                    return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) != '+' && s.charAt(i) != '-')\n\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) != '.' || s.charAt(i + 1) == s.charAt(i + 2) && s.charAt(i + 1) != '.')\n\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) != 'x' || s.charAt(i + 1) == s.charAt(i + 2) && s.charAt(i + 1) != 'x')\n\n                    return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) != '!' || s.charAt(i + 1) == s.charAt(i + 2) && s.charAt(i + 1) != '!')\n\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) != 'x')\n\n                    return false;\n    }\n    return true;\n}",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) != 'x' || s.charAt(i + 1) == s.charAt(i + 2) && s.charAt(i + 1) != 'x')\n\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy lines start\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n// buggy lines end\n                else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "function range": "26,5-59,5",
      "output": [
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > -0.7)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > -1.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > -0.3)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i++) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > -2.7)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}"
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy lines start\n        if (l - i == 0)\n// buggy lines end\n                    return false;\n    }\n    return true;\n}",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i < 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 1)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i <= 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i < 0)\n            break;\n        if (string.substring(i).equals(string.substring(0, i)))\n            return true;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i == 1) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i++) {\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i < 0)\n            break;\n        if (string.substring(i, i + 1).equals(\"String_Node_Str\"))\n            return false;\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i > 0) {\n            if (string.substring(i).startsWith(string.substring(0, i)))\n                return false;\n        }\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i >= 0) {\n            if (string.substring(i).equals(string.substring(0, i))) {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l - i < 0)\n            break;\n        if (l - i == 0)\n            return false;\n    }\n    return true;\n}"
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy lines start\n    return (int) ((10 + 9) * Math.pow(10, n - 2));\n// buggy lines end\n    }",
      "function range": "7,5-11,5",
      "output": [
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    return (int) ((10 + 9) * Math.pow(10, n - 1));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    return (int) ((10 + 9) * Math.pow(10, n - 1));\n\n    }",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    if (n < 10)\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n    else\n        return (int) ((10 + 9) * Math.pow(10, n - 1));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    if (n < 10)\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n    else\n        return (int) ((10 + 9) * Math.pow(10, n - 3));\n}",
        "public static intstarts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    return (int) ((10 + 9) * Math.pow(10, n - 1));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    if (n == 2)\n        return 10;\n    else\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    if (n <= 2)\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n    else\n        return (int) ((10 + 9) * Math.pow(10, n - 2) * 10);\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    if (n < 2)\n        return 10;\n    else\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n}",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    if (n < 10)\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n    else\n        return (int) ((10 + 9) * Math.pow(10, n - 2) * 10);\n\n    }",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n\n    if (n < 10)\n        return (int) ((10 + 9) * Math.pow(10, n - 2));\n    else\n        return (int) ((10 + 9) * Math.pow(10, n - 2) * 10);\n}"
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy lines start\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n// buggy lines end\n            }\n    return Integer.toBinaryString(sum);\n}",
      "function range": "17,5-23,5",
      "output": [
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i));\n        }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1) {\n        sum += Integer.parseInt((N + \"\").substring(i));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i++) {\n        sum += Integer.parseInt((N + \"\").substring(i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n\n        sum += Integer.parseInt((N + \"\").substring(i));\n\n            }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i).replace(\"String_Node_Str\", \"\"));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i++) {\n        sum += Integer.parseInt((N + \"\").substring(i));\n    }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseUnsignedInt((N + \"\").substring(i + 1));\n        }\n    return Integer.toBinaryString(sum);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i));\n    }\n    return Integer.toString(sum, 2);\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt((N + \"\").substring(i));\n            }\n    return Integer.toBinaryString(sum);\n}"
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy lines start\n    for (int i = 0; i < lst.length; i += 1) {\n// buggy lines end\n            if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "function range": "8,5-15,5",
      "output": [
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 1; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 1; i < lst.length; i += 2) {\n            if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 1; i < lst.length; i += 2) {\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 1; i < lst.length; i+=2) {\n        sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_ odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 1; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n\n    for (int i = 0; i + 1 < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}"
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy lines start\n        result += new String(chars);\n    }\n    return result;\n// buggy lines end\n        }",
      "function range": "17,5-25,5",
      "output": [
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n\n        result += new String(chars) + \" \";\n    }\n    result = result.substring(0, result.length() - 1);\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n\n        result += new String(chars) + \" \";\n    }\n    return result.substring(0, result.length() - 1);\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n\n        result += new String(chars) + \" \";\n    }\n    result.substring(0, result.length() - 1);\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n\n        result += new String(chars) + \" \";\n    }\n    result.trim();\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n\n        result += new String(chars) + \" \";\n    }\n    result.substring(0, result.length() - 1);\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n\n        if (partner != null) {\n            if (partner.equals(\"String_Node_Str\")) {\n                result += new String(chars);\n            } else if (partner.equals(\"String_Node_Str\")) {\n                result = new String(chars) + result;\n            }\n        } else {\n            result += new String(chars);\n        }\n\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n\n        if (part < 0 || part > chars.length - 1) {\n            result += new String(chars);\n        } else {\n            result += new String(chars, part, chars.length - part);\n        }\n    }\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars) + \" \";\n    }\n    result = result.substring(0, result.length() - 1);\n    return result;\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars) + \" \";\n    }\n    return result.substring(0, result.length() - 1);\n}",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n\n        result += new String(chars) + \" \" ;\n    }\n    result = result.substring(0, result.length() - 1);\n    return result;\n}"
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy lines start\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n// buggy lines end\n                    }\n        }\n    }\n    return result;\n}",
      "function range": "22,5-33,5",
      "output": [
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst.get(i).size(); j++) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_COLUMN().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_COL().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_COLUMN().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_COL().new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new TupleIJ(i, j));\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy lines start\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n// buggy lines end\n                    }\n        return array;\n    }\n}",
      "function range": "19,5-32,5",
      "output": [
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1) {\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i++) {\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1) {\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i++) {\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1) {\n            swap(array, i, array.length - i - 1);\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i++) {\n            swap(array, i, array.length - i - 1);\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){         \n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i ++) {\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}"
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy lines start\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n// buggy lines end\n                            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2 + 1)\n                            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n                            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2 % 26)\n                            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n                );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((s.indexOf((int) c) + 2 * 2) % 26)\n                            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((s.indexOf((int) c) + 2 * 2) % 26)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2 + 1)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2)\n                    );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(s.indexOf((int) c) + 2 * 2 % 26)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n// buggy lines start\n    List<Integer> numbers = new ArrayList<Integer>();\n// buggy lines end\n        for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "function range": "15,5-25,5",
      "output": [
        "public static Integer next_smallest(int[] lst) {\n    Set<Integer> numbers = new HashSet<Integer>();\n        for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new LinkedList<Integer>();\n        for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    HashSet<Integer> numbers = new HashSet<Integer>();\n        for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new LinkedList<Integer>();\n        for (Integer n : lst)\n        numbers.add(n);\n    Integer[] noDuplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(noDuplicate);\n    if (noDuplicate.length < 2)\n        return null;\n    return noDuplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    HashSet<Integer> set = new HashSet<Integer>();\n        for (Integer n : lst)\n        set.add(n);\n    Integer[] no_duplicate = set.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n        for (int n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    Set<Integer> numbers = new HashSet<Integer>();\n        for (int n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    HashSet<Integer> set = new HashSet<Integer>();\n        for (int n : lst)\n        set.add(n);\n    Integer[] no_duplicate = set.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    Set<Integer> numbers = new TreeSet<Integer>();\n        for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
        "public static Integer next_smallest(int[] lst) {\n    HashSet<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < lst.length; i++) {\n            set.add(lst[i]);\n        }\n    Integer[] numbers = set.toArray(new Integer[] {});\n    Arrays.sort(numbers);\n    if (numbers.length < 2)\n        return null;\n    return numbers[1];\n}"
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy lines start\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n// buggy lines end\n                    result += 1;\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n            result += 1;\n        }\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(STAY_SILENT))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n            if (sentence.length() >= 3 && sentence.subSequence(2, 3).equals(\"AM \"))\n                result += 2;\n            else\n                result += 1;\n        }\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equalsIgnoreCase(\"I \"))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n            result++;\n        }\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n            if (sentence.length() >= 3 && sentence.subSequence(2, 3).equals(\"AM \"))\n                result += 1;\n        }\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(QUOTE))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(FOUR_SPACES))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(BORED))\n            result += 1;\n    }\n    return result;\n}",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(NOUGHTREE))\n            result += 1;\n    }\n    return result;\n}"
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n// buggy lines start\n    if ((int)x == x && (int)y == y) {\n        if (x + y == z || x + z == y)\n// buggy lines end\n                return true;\n    }\n    return false;\n}",
      "function range": "17,5-23,5",
      "output": [
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + y == z || x + z == y)\n            return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int) x == x && (int) y == y && (int) z == z) {\n        if (x + y == z || x + z == y)\n            return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n\n    if ((int) x == x && (int) y == y && (int) z == z) {\n        if (x + y == z || x + z == y)\n\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + y == z || x + z == y)\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n\n    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + y == z || x + z == y)\n\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n\n    if ((int) x == x && (int) y == y && (int) z == z) {\n\n        if (x + y == z || x + z == y)\n\n                return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n\n    if ((int) x == x && (int) y == y && (int) z == z) {\n\n        if (x + y == z || x + z == y)\n            return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int) x == x && (int) y == y && (int) z == z) {\n        if (x + y == z || x + z == y) {\n            return true;\n        }\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y == y && (int)z == z) {\n        if (x + y == z || x + z == y || y + z == x)\n            return true;\n    }\n    return false;\n}",
        "public static boolean any_int(double x, double y, double z) {\n    if ((int)x == x && (int)y ==y && (int)z == z) {\n        if (x + y == z || x + z == y)\n            return true;\n    }\n    return false;\n}"
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy lines start\n        if (Character.isLowerCase(c)) {\n// buggy lines end\n                    c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-32,5",
      "output": [
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (Character.isLetter(c)) {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (c != ' ' && c != '\\n') {\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (Character.isLowerCase(c)) {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (c != ' ' && c != '\\n' && c != '\\t' && c != '\\u00A0' && c != '\\u202F' && !Character.isLetter(c) && !Character.isDigit(c)) {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == ' ' || c == '.') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == ' ') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (c != ' ' && c != '-' && c != '_' && c != '!' && c != '@' && c != '#' && c != '$' && c != '%' && c != '^' && c != '&' && c != '*' && c != '(' && c != ')' && c != '+' && c != '.' && c != '/' && c != '?' && c != '>' && c != ',' && c != ';' && c != ':' && c != '>' && c != '\"' && c != '[' && c != ']' && c != '[' && c != ']') {\n                    c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n\n        if (c != ' ' && c != '\\n' && c != '\\t' && c != '\\r' && c != '\\f' && c != ',' && c != '.' && c != ';' && c != ':' && c != '?' && c != '!' && c != '\"' && c != '(' && c != ')' && c != '[' && c != ']' && c != '*' && c != '+' && c != '-' && c != '_' && c != ',' && c != '>' && c != '<'\n                && c != '0' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c != '6' && c != '7' && c != '8' && c != '9' && c != '[' && c != ']' && c != '*' && c != '+' && c != '-' && c != '_') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}"
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy lines start\n        result += (int) c;\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "22,5-35,5",
      "output": [
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (c - '0');\n    }\n    return result;\n}",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += get_num(c);\n    }\n    return result;\n}",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
        "public static int skjdkasdk(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (c - '0');\n    }\n    return result;\n}",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        if (c != ' ')\n            result += (int) c;\n        }\n    return result;\n}",
        "public static int skjdkasd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (c - '0');\n    }\n    return result;\n}",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += get_number(c);\n    }\n    return result;\n}",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        if (c != '+')\n            result += (int) c;\n        }\n    return result;\n}",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) Math.pow(c - '0', 2);\n    }\n    return result;\n}",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += get_numeric_value(c);\n    }\n    return result;\n}"
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy lines start\n            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n// buggy lines end\n                            state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "function range": "16,5-43,5",
      "output": [
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\") || state.equals(\"lower\")) && !str_key.toLowerCase().equals(str_key)) {\n                            state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\") || state.equals(\"lower\")) && !str_key.toLowerCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\") || state.equals(\"lower\")) && !str_key.toUpperCase().equals(str_key)) {\n                            state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) || (state.equals(\"lower\") && !str_key.toLowerCase().equals(str_key))) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n\n            } else if (!state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\") || state.equals(\"lower\")) && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n\n            } else if ((state.equals(\"upper\") || state.equals(\"lower\")) && !str_key.toLowerCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\")) && !str_key.toUpperCase().equals(str_key)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"upper\") && !str_key.equals(str_key.toUpperCase())) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n\n            } else if ((state.equals(\"upper\")) && !str_key.toUpperCase().equals(str_key)) {\n\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}"
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy lines start\n        boolean is_prime = false;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n// buggy lines end\n                    }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "function range": "17,5-30,5",
      "output": [
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n\n        boolean is_prime = true;\n        for (int j = 2; j * j <= i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                isPrime = false;\n            }\n        }\n        if (isPrime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        int sqrt_i = (int) Math.sqrt(i);\n        boolean is_prime = false;\n        for (int j = 2; j <= sqrt_i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        int sqrt = (int) Math.sqrt((double) i);\n        boolean is_prime = false;\n        for (int j = 2; j <= sqrt; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n\n        boolean isPrime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = false;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n\n        boolean isPrime = true;\n        for (int j = 2; j * j <= i; j += 1){\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) primes.add(i);\n    }\n    return primes;\n}",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j * j <= i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}"
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n// buggy lines start\n    return (a % 10) * (b % 10);\n// buggy lines end\n    }",
      "function range": "13,5-15,5",
      "output": [
        "public static int multiply(int a, int b) {\n\n    if (a == 0 || b == 0) {\n        return 0;\n    } else {\n        return (a % 10) * (b % 10);\n    }\n\n}",
        "public static int multiply(int a, int b) {\n\n    return (a % 10) * (b % 100);\n\n    }",
        "public static int multiply(int a, int b) {\n\n    return (a % 10) * (b % 10) % 10;\n\n    }",
        "public static int multiply(int a, int b) {\n\n    return (a % 10) * (b % 10) % 10;\n}",
        "public static int multiply(int a, int b) {\n\n    if (a == 0 || b == 0) {\n        return 0;\n    }\n    int result = (a % 10) * (b % 10);\n    if (result == 0) {\n        return 0;\n    }\n    return result;\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 10) % 10;\n}",
        "public static int multiply(int a, int b) {\n    return (a % 10) * (b % 100);\n}",
        "public static int multiply(int a, int b) {\n\n    if (b == 0) {\n        return 0;\n    }\n    int result = 0;\n    while (b > 0) {\n        if ((b & 1) == 1) {\n            result = add(result, a);\n        }\n        b >>= 1;\n        a <<= 1;\n    }\n    return result;\n}",
        "public static int multiply(int a, int b) {\n\n    if (b == 0) {\n        return 0;\n    }\n    int result = (a % 10) * (b % 10);\n    if (result == 0) {\n        return 0;\n    }\n    return result;\n}",
        "public static int multiply(int a, int b) {\n\n    if (b == 0) {\n        return 0;\n    }\n    int result = 0;\n    while (b > 0) {\n        if (b % 2 == 1) {\n            result = add(result, a);\n        }\n        b /= 2;\n        a *= 2;\n    }\n    return result;\n\n}"
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy lines start\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n// buggy lines end\n                    count += 1;\n    }\n    return count;\n}",
      "function range": "11,5-19,5",
      "output": [
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n            count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n                count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (isUpperCase(c))\n            count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (Character.isUpperCase(s.charAt(i))) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (Character.isUpperCase(c))\n            count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if ((c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') && s.charAt(i + 1) != ' ')\n            count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if ((c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') && s.charAt(i + 1) != ' ')\n\n            count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i ++) {\n        if (Character.isUpperCase(s.charAt(i))) {\n            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\n            count += 1;\n    }\n    return count;\n}",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n\n        if (!Character.isLowerCase(c))\n            count += 1;\n    }\n    return count;\n}"
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy lines start\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n// buggy lines end\n        } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "function range": "20,5-35,5",
      "output": [
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : -1;\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.endsWith(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = (int)Math.round(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : -((int)Math.ceil(num));\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int) Math.floor(num) : (int) Math.ceil(num);\n    } else if (value.length() > 0) {\n        result = (int) Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num >= 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    } else if (value.length() > 0) {\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0 ? (int)Math.floor(num) : -((int)Math.ceil(Math.abs(num)));\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = (int)Math.round(2 * num) / 2;\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}"
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy lines start\n\t\tpile.add(n - 2 * i);\n// buggy lines end\n  \t}\n\treturn pile;\n}",
      "function range": "20,2-26,2",
      "output": [
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - i);\n  \t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n  \t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i + 1);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i - 1);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(n - 2 * i + 1);\n  \t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n    ArrayList<Integer> pile = new ArrayList<Integer>();\n    for (int i = 0; i < n; i++) {\n        pile.add(n - i);\n    }\n    return pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n    ArrayList<Integer> pile = new ArrayList<Integer>();\n    for(int i = 0; i < n; i++) {\n        pile.add(n - i);\n    }\n    return pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(-2 * i);\n\t}\n\treturn pile;\n}"
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy lines start\n\tString s_list = \"\";\n// buggy lines end\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "function range": "15,2-30,2",
      "output": [
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tStringBuilder s_list = new StringBuilder();\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list.append(' ');\n\t\t} else {\n\t\t\ts_list.append(c);\n\t\t}\n\t}\n\tString[] result_array = s_list.toString().trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\ts = s.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n\n\tString[] result_array = s.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\tString s_list = s.replace(\",\", \" \");\n\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\ts = s.replaceAll(\",\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\tString[] result_array = s.trim().split(\"\\\\s+\");\n\tfor (String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\ts = s.replaceAll(\",\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\n\tString[] result_array = s.trim().split(\"\\\\s+\");\n\tfor (String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\ts = s.replaceAll(\",\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\ts = s.replaceAll(\",\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\n\tString[] result_array = s.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\ts = s.replaceAll(\",\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\n\tString[] result_array = s.trim().split(\"\\\\s+\");\n\tfor (String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\n\ts = s.replaceAll(\",\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\ts = s.replaceAll(\"String_Node_Str\", \" \");\n\n \tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}"
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n// buggy lines start\n    if(x < y) return -1;\n// buggy lines end\n        if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "function range": "14,5-19,5",
      "output": [
        "public static int choose_num(int x, int y) {\n    if(x < y) {\n        return -1;\n    }\n    if((y % 2) == 0) {\n        return y;\n    }\n    if(x == y) {\n        return -1;\n    }\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) {\n        return -1;\n    } else if((y % 2) == 0) {\n        return y;\n    } else if(x == y) {\n        return -1;\n    } else {\n        return y - 1;\n    }\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) {\n        return -1;\n    } else if((y % 2) == 0) {\n        return y;\n    } else if(x == y) {\n        return -1;\n    }\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < 0 || y < 0)\n        return -1;\n    if(x < y)\n        return y;\n    if((y % 2) == 0)\n        return y;\n    if(x == y)\n        return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) {\n        return -1;\n    } else if((y % 2) == 0) {\n        return y;\n    }\n    if(x == y) {\n        return -1;\n    }\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) {\n        return -1;\n    }\n\n    if((y % 2) == 0) {\n        return y;\n    }\n\n    if(x == y) {\n        return -1;\n    }\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) return -1;\n    if(x == y) return -1;\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) {\n        return -1;\n    } else if(x == y) {\n        return -1;\n    }\n    return y - 1;\n}",
        "public static int choose_num(int x, int y) {\n    if(x < y) {\n        return -1;\n    }\n\n    if((y % 2) == 0) {\n        return y;\n    }\n    if(x == y) {\n        return -1;\n    }\n    return y - 1;\n}"
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy lines start\n        avg_rounded = (int) Math.ceil(avg);\n// buggy lines end\n            } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "function range": "15,5-30,5",
      "output": [
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.round(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        if(avg % 2 == 0)\n            avg_rounded = (int) Math.ceil(avg);\n        else\n            avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        if(avg % 2 == 0)\n            avg_rounded = (int) Math.ceil(avg);\n        else\n            avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        if((double) Math.ceil(avg) - avg < 0.5) {\n            avg_rounded = (int) Math.ceil(avg);\n        } else {\n            avg_rounded = (int) Math.floor(avg);\n        }\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        if((double) Math.ceil(avg) - avg <= 0.5) {\n            avg_rounded = (int) Math.ceil(avg);\n        } else {\n            avg_rounded = (int) Math.floor(avg);\n        }\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        if(avg % 2 != 0)\n            avg_rounded = (int) Math.ceil(avg);\n        else\n            avg_rounded = (int) avg;\n            } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        if((double) Math.ceil(avg) - avg == 0.5) {\n            avg_rounded = (int) avg;\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n            } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        if((double) Math.ceil(avg) - avg < 0.5) {\n            avg_rounded = (int) Math.ceil(avg);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}"
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy lines start\n            if((curr_digit % 2) != 0) {\n                all_odd = true;\n// buggy lines end\n                            break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n\n            if(curr_digit % 2 != 0) {\n                all_odd = true;\n            } else {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n\n            if(curr_digit % 2 != 0 && curr_digit != 0) {\n                all_odd = true;\n\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n\n            if(curr_digit % 2 != 0) {\n                all_odd = true;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for (int i : x) {\n        int num = i;\n        boolean allOdd = true;\n        while (num > 0) {\n            int currDigit = num % 10;\n\n            if ((currDigit % 2) != 0) {\n                allOdd = true;\n            } else {\n                allOdd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (allOdd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n\n            if(curr_digit % 2 != 0) {\n                all_odd = true;\n\n                            break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for (int i : x) {\n        int num = i;\n        int curr_digit = 0;\n        boolean allOdd = true;\n\n        while (num > 0) {\n            curr_digit = num % 10;\n\n            if ((curr_digit % 2) != 0) {\n                allOdd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if (allOdd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for (int i : x) {\n        int num = i;\n        boolean allOdd = true;\n        while (num > 0) {\n            int currDigit = num % 10;\n\n            if (currDigit % 2 != 0) {\n                allOdd = true;\n            }\n            num /= 10;\n        }\n        if (allOdd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n\n            if(curr_digit % 2 != 0 && curr_digit != 0) {\n                all_odd = true;\n\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for (int i : x) {\n        int num = i;\n        int digit = 0;\n        boolean allOdd = true;\n        while (num > 0) {\n            digit = num % 10;\n            if (digit % 2 != 0) {\n                allOdd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if (allOdd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for (int i : x) {\n        int num = i;\n        int curr_digit = 0;\n        boolean allOdd = true;\n\n        while (num > 0) {\n            curr_digit = num % 10;\n            if (curr_digit % 2 != 0) {\n                allOdd = true;\n                break;\n            }\n            num /= 10;\n        }\n        if (allOdd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}"
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy lines start\n        if(digit_map.get(num) != \"\") {\n// buggy lines end\n                    result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "function range": "31,5-50,5",
      "output": [
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for (int num : a) {\n        if (digit_map.containsKey((int) num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if (digit_map.containsKey((int) num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for (int num : a) {\n        if (digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for (int num : a) {\n        if (digit_map.containsKey((long) num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for (int num : a) {\n        if (digit_map.containsKey((long) num)) {\n            result.add(digit_map.get((long) num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if (digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for (int num : a) {\n        if (digit_map.containsKey((int) num))\n            result.add(digit_map.get(num));\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if (digit_map.containsKey(num) && digit_map.get(num) != null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for (int num : a) {\n        if(digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        if (digit_map.containsKey((long) num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}"
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy lines start\n            for(int j = 1; j <= i; i++) x -= j;\n// buggy lines end\n                        ret.add(x);\n        }\n    }\n    return ret;\n}",
      "function range": "16,5-30,5",
      "output": [
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n\n                        ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n\n ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n\n                ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n\nret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n\n        ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n                        ret.add(x);\n        }\n    }\n    return ret;\n}",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n\n            for(int j = 1; j <= i; j++) x += j;\n\n             ret.add(x);\n        }\n    }\n    return ret;\n}"
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy lines start\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n// buggy lines end\n            }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "function range": "39,5-47,5",
      "output": [
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n\n        if (is_palindrome(i) && (i % 2) == 0)\n            even_palindrome_count++;\n        else if (is_palindrome(i) && (i % 2) == 1)\n            odd_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if (is_palindrome(i)) {\n            if ((i % 2) == 0)\n                even_palindrome_count++;\n            else\n                odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n\n        if (is_palindrome(i) && (i % 2) == 0)\n            even_palindrome_count++;\n        else if (is_palindrome(i) && (i % 2) == 1)\n            odd_palindrome_count++;\n\n            }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n\n        if (is_even(i) && is_palindrome(i))\n            even_palindrome_count++;\n        else if (is_odd(i) && is_palindrome(i))\n            odd_palindrome_count++;\n\n            }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if (is_palindrome(i) && (i % 2) == 0)\n            even_palindrome_count++;\n        else if (is_palindrome(i) && (i % 2) == 1)\n            odd_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n\n        if (is_even(i) && is_palindrome(i))\n            even_palindrome_count++;\n        else if (is_odd(i) && is_palindrome(i))\n            odd_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n\n        if (is_even_palindrome(i))\n            even_palindrome_count++;\n        else if (is_odd_palindrome(i))\n            odd_palindrome_count++;\n\n            }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if (is_even_palindrome(i))\n            even_palindrome_count++;\n        else if (is_odd_palindrome(i))\n            odd_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n\n        if (is_odd_palindrome(i))\n            odd_palindrome_count++;\n        else if (is_even_palindrome(i))\n            even_palindrome_count++;\n\n            }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if (is_palindrome(i) && (i % 2) == 0)\n            even_palindrome_count++;\n        else if (is_palindrome(i) && (i % 2) == 1)\n            odd_palindrome_count++;\n        }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}"
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy lines start\n        if(neg) num *= 1;\n// buggy lines end\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "function range": "6,5-20,5",
      "output": [
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg)\n            num *= -1;\n\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg)\n                sum -= num_string.charAt(i) - '0';\n            else\n                sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg) num *= -1;\n\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg)\n            num *= -1;\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg)\n                sum -= num_string.charAt(i) - '0';\n            else\n                sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        int converted = num;\n        if(neg) converted *= -1;\n        if(converted > Integer.MAX_VALUE) converted = Integer.MAX_VALUE;\n        else if(converted < Integer.MIN_VALUE) converted = Integer.MIN_VALUE;\n        num = converted;\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        num *= (neg ? -1 : 1);\n\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(Integer.toString(num).indexOf('-') != -1)\n            num *= 1;\n\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        num *= (neg ? -1 : 1);\n\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(Integer.toString(num).contains(\"String_Node_Str\")) {\n            continue;\n        }\n\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        num *= (num < 0) ? -1 : 1;\n\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n\n        if(neg)\n            num *= -1;\n\n                String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}"
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy lines start\n    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n// buggy lines end\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "function range": "7,5-29,5",
      "output": [
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n    int min_value = sorted_arr.get(0);\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n     int min_value = sorted_arr.get(0);\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n    int min_value = sorted_arr.get(0);\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n    int min_value = sorted_arr.get(0);\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) {\n            min_index = i;\n        }\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n    int min_value = sorted_arr.get(0);\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value)\n            min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n     int min_value = sorted_arr.get(0);\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n     int min_value = sorted_arr.get(0); // Fix: Change the index to 0\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n    int min_value = sorted_arr.get(sorted_arr.size() - 1) + 1;\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n    int min_value = sorted_arr.get(0);\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n\n    int min_value = sorted_arr.get(0);\n\n        int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = min_index; i > 0; i--) {\n        arr_after_move.add(arr.get(i - 1));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}"
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy lines start\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n// buggy lines end\n        }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "function range": "20,5-32,5",
      "output": [
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for (int i : lst2) {\n        if ((i % 2) == 1) {\n            odd++;\n        }\n    }\n    for (int i : lst2) {\n        if ((i % 2) == 0) {\n            even++;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "for (int i : lst1) {\n    if ((i % 2) == 1) {\n        odd++;\n    }\n}",
        "for (int i : lst2) {\n    if ((i % 2) == 1) {\n        odd++;\n    }\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for (int i : lst2) {\n        if ((i % 2) == 1) {\n            even++;\n        }\n    }\n    for (int i : lst2) {\n        if ((i % 2) == 0) {\n            even++;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for (int i : lst2) {\n        if ((i % 2) != 0) odd++;\n        else even++;\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "for (int i : lst2) {\n    if ((i % 2) == 1) {\n        odd++;\n    }\n    }\n    for (int i : lst2) {\n        if ((i % 2) == 0) {\n            even++;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for (int i : lst2) {\n        if ((i % 2) == 1) {\n            odd++;\n        }\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "for (int i : lst1) {\n    if ((i % 2) == 1) {\n        odd++;\n    }\n    }\n    for (int i : lst2) {\n        if ((i % 2) == 0) {\n            even++;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
        "for (int i : lst1) {\n    if ((i % 2) == 1)\n        odd++;\n}",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n\n    for (int i : lst2) {\n        if ((i % 2) != 0) odd++;\n        else even++;\n    }\n\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}"
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy lines start\n        if(count_letter[i] < most_count) {\n// buggy lines end\n                    most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "function range": "19,5-40,5",
      "output": [
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if (s.isEmpty())\n        return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for (int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if (count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if (most_count == 0)\n        res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if (s.isEmpty())\n        return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for (int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count_letter[i] != 0) {\n            if (count_letter[i] > most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if (count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n    }\n    if (most_count == 0)\n        res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if (s.isEmpty()) {\n        return res;\n    }\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for (int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if (most_count == 0) {\n        res.clear();\n    }\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if (s.isEmpty())\n        return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for (int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count_letter[i] != 0 && count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if (count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if (most_count == 0)\n        res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if (s.isEmpty()) {\n        return res;\n    }\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for (int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if (count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if (most_count == 0) {\n        res.clear();\n    }\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if (s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for (int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if (count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if (most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] != 0 && count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if (s.isEmpty())\n        return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for (int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if (most_count == 0)\n        res.clear();\n    return res;\n}",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if (s.isEmpty())\n        return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for (int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count_letter[i] != 0) {\n            if (count_letter[i] >= most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if (count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n    }\n    if (most_count == 0)\n        res.clear();\n    return res;\n}"
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy lines start\n        if(c.indexOf(s.charAt(i)) != -1) {\n// buggy lines end\n                    new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "function range": "17,5-32,5",
      "output": [
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if (c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for (int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for (int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if (c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if (!c.contains(String.valueOf(s.charAt(i)))) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if (Arrays.binarySearch(c.getBytes(), s.getBytes()[i]) >= 0) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n   ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public staticArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for (int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if (c.indexOf(s.charAt(i)) != -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for (int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
        "public staticArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(c.indexOf(s.charAt(i)) == -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}"
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy lines start\n            if(digit % 2 == 0) {\n                n--;\n// buggy lines end\n                        }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "function range": "19,5-32,5",
      "output": [
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 != 0) {\n                n--;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 != 0) {\n                n++;\n\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for (String s : lst) {\n        int n = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if (digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 != 0) {\n                n++;\n            }\n\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 != 0) {\n                n--;\n                        }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 != 0) {\n                n++;\n\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 != 0) {\n                n++;\n            }\n        }\n        result.add(\"The number of odd elements \" + n + \" in the str\" + n + \"ng \" + n + \" of the \" + n + \" input.\");\n    }\n    return result;\n}",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n\n            if(digit % 2 != 0) {\n                n--;\n\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}"
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy lines start\n        s += num;\n// buggy lines end\n                if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "function range": "14,5-32,5",
      "output": [
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if (s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if (s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if (max_sum == 0) {\n        max_sum = -nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n        if(s < 0) {\n            s = 0;\n        }\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for (long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n        if (s < 0) {\n            s = 0;\n        }\n    }\n    if (max_sum == 0) {\n        max_sum = -nums.get(0);\n        for (int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n        if(s < 0) {\n            s = 0;\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n        if (s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for (long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n        if (s < 0) {\n            s = 0;\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}"
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy lines start\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n// buggy lines end\n                }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "function range": "38,5-48,5",
      "output": [
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n}\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j : grid[i]) {\n            row_capacity += j;\n\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        \n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for(int j : grid[i]) {\n            row_capacity += j;\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n\n        for (int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for (int[] row : grid) {\n        int row_capacity = 0;\n        for (int cell : row) {\n            row_capacity += cell;\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}"
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy lines start\n      if(o1 == o2) return 1;\n      if(o1 < o2) return 0;\n      if(o1 > o2) return -1;\n   }\n// buggy lines end\n         if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "function range": "31,10-42,10",
      "output": [
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0;\n        if(o1 < o2) return -1;\n        if(o1 > o2) return 1;\n   }\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 == o2) return 0; // Fixed line\n      if(o1 < o2) return -1;\n      if(o1 > o2) return 1; // Fixed line\n   }\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0;\n        if(o1 < o2) return -1;\n        if(o1 > o2) return 1;\n   }\n   else if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0; // Fix line\n        if(o1 < o2) return -1;\n        if(o1 > o2) return 1;\n   }\n     if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0; // Fix: Change '1' to '0'\n        if(o1 < o2) return -1;\n        if(o1 > o2) return 1;\n   }\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0;\n        if(o1 < o2) return -1;\n        if(o1 > o2) return 1;\n   }\n   else {\n         if(num_ones_o1 < num_ones_o2) return -1;\n         else return 1;\n   }\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0; // Fix line\n        if(o1 < o2) return -1;\n        if(o1 > o2) return 1; // Fix line\n   }\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0; // Fixed line\n    }\n         if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0; // Fix\n        if(o1 < o2) return -1;\n        if(o1 > o2) return 1;\n   }\n     if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
        "public int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n        if(o1 == o2) return 0; // Fixed line\n    }\n    if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}"
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy lines start\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n// buggy lines end\n                for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 't', 'v', 'x', 'z'};\n\n            for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < consonants.length; k++) {\n                if(consonants[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 't', 'v', 'x', 'z'};\n\n            for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'x', 'z'};\n\n                for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < consonants.length; k++) {\n                if(consonants[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'q', 'v', 'x', 'z'};\n\n                for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 't', 'v', 'x', 'z'};\n\n                for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < consonants.length; k++) {\n                if(consonants[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'};\n\n            for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < consonants.length; k++) {\n                if(consonants[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'x', 'z'};\n\n            for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < consonants.length; k++) {\n                if(consonants[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'};\n\n            for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n        char[] consonants = get_consonants();\n\n                for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < consonants.length; k++) {\n                if(consonants[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n\n            char[] consonants = {'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'a', 's', 'd', 'f', 'h', 'c', 'k', 'm', 'v', 'l'};\n\n                for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < consonants.length; k++) {\n                if(consonants[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}"
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy lines start\n    for(int i = word.length() - 2; i >= 0; i--) {\n// buggy lines end\n            if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "function range": "23,5-34,5",
      "output": [
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 1; i >= 0; i--) {\n\n            if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i)) && vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n            return word.substring(i, i + 1);\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if (vowels.contains(word.charAt(i))) {\n            if (!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            int offset = 0;\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if (vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 3; i >= 0; i--) {\n\n            if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i))) {\n            int prev = i - 1;\n            if(prev < 0) prev = 0;\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(prev))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i)) && !vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n            return word.substring(i, i + 1);\n        }\n    }\n    return \"\";\n}",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n    for(int i = word.length() - 2; i >= 0; i--) {\n        if(vowels.contains(word.charAt(i)) && vowels.contains(word.charAt(i + 1))) {\n            return word.substring(i, i + 1);\n        }\n    }\n    return \"\";\n}"
      ]
    },
    "MATCH_PARENS": {
      "loc": "22-23",
      "input": "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n// buggy lines start\n        if(s.charAt(i) == '(') val--;\n// buggy lines end\n                else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
      "function range": "19,5-27,5",
      "output": [
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') val--;\n        else if(s.charAt(i) == ')') val++;\n        else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') val--;\n        else if(s.charAt(i) == ')') val++;\n        else continue;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') {\n            val--;\n        } else if(s.charAt(i) == ')') {\n            val++;\n        }\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') val++;\n        else if(s.charAt(i) == ')') val--;\n        else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i) == '(') val--;\n        else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') val--;\n        else if(s.charAt(i) == ']') val++;\n        else val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') val++;\n        else val--;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') val--;\n        else if(s.charAt(i) == ')' ) val++;\n        else return false;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') val--;\n        else if(s.charAt(i) == ')') val++;\n        else return false;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}",
        "public static boolean check(String s) {\n    int val = 0;\n    for(int i = 0; i < s.length(); i++) {\n\n        if(s.charAt(i) == '(') val--;\n        else if(s.charAt(i) == '[' || s.charAt(i) == '{') val++;\n        else if(s.charAt(i) == ')' || s.charAt(i) == ']' || s.charAt(i) == '}') {\n            if(val == 0)\n                return false;\n            val--;\n        } else\n            val++;\n        if(val < 0) return false;\n    }\n    return val == 0;\n}"
      ]
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy lines start\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n// buggy lines end\n            result.add(arr.get(i));\n    }\n    return result;\n}",
      "function range": "32,5-39,5",
      "output": [
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int i = arr.size() - 1; i >= arr.size() - k && i >= 0; i--) {\n\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int i = arr.size() - 1; i >= arr.size() - k && i >= 0; i--) {\n\n            result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int i = arr.size() - 1; i >= arr.size() - k && i != 0; i--) {\n\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int i = arr.size() - 1; i >= arr.size() - k && i != -1; i--) {\n\n            result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int i = arr.size() - 1; i >= arr.size() - k && i != 0; i--) {\n\n            result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        if (!result.contains(arr.get(i)))\n            result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int i = arr.size() - 1; i >= arr.size() - k && i != -1; i--) {\n\n        result.add(arr.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n\n    for (int i = k - 1; i >= 0; i--) {\n        result.add(arr.get(i));\n    }\n    return result;\n}"
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy lines start\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n// buggy lines end\n                    result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "function range": "16,5-24,5",
      "output": [
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 1 && lst.get(i) % 2 == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 1 && lst.get(i) % 2 == 0 && lst.get(i) <= 11) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if((i % 2) == 1 && lst.get(i) % 2 == 1) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 0 && lst.get(i) % 2 == 1) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 1 && lst.get(i) % 2 == 0 && lst.get(i) <= 11) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 1 && lst.get(i) % 2 == 0 && lst.get(i) <= 2 * lst.get(i + 1)) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 1 && lst.get(i) % 2 != 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 1 && lst.get(i) % 2 == 1) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 1 && lst.get(i) % 2 == 0 && lst.get(i) <= 1000) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i % 2) == 1 && lst.get(i) % 2 == 0 && lst.get(i) <= 2000) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}"
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy lines start\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n// buggy lines end\n                }\n    }\n    return result;\n}",
      "function range": "21,5-29,5",
      "output": [
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() > 1) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for (int i = 0; i < k; i++) {\n        if (Integer.toString(arr.get(i)).length() >= 2) {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() > 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= 1) {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if (Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() > 1) {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if (Integer.toString(arr.get(i)).length() >= 2) {\n            result += arr.get(i);\n        }\n    }\n    return result;\n}",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        if(Integer.toString(arr.get(i)).length() >= k) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n}"
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy lines start\n    while(n >= 1) {\n        if((n % 2) == 1) n /= 2;\n// buggy lines end\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "24,5-34,5",
      "output": [
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n <= 1) {\n        if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n > 1) {\n        if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n <= 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n >= 1 && n <= x) {\n        if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n >= 1 && n != 1) {\n        if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n > 1) {\n        if((n % 2) == 1) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n >= 1 && n <= RN) {\n        if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n >= 1 && n <= limit) {\n        if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n <= limit) {\n        if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n\n    while(n >= 1 && result.size() < 15) {\n        if((n % 2) == 1) n /= 2;\n            else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}"
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy lines start\n            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n// buggy lines end\n                    }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "function range": "25,5-50,5",
      "output": [
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month == month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month == month_check1[i] && !(day < 1 || day > 31)) {\n                return false;\n            }\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) {\n                return false;\n            }\n        }\n        if (month == 2 && (day < 1 || day > 29)) {\n            return false;\n        }\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month == month_check1[i] && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month == month_check1[i] && (!(day >= 1 && day <= 31))) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month == month_check1[i] && !(day >= 1 && day <= 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) {\n            return false;\n        }\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month != month_check1[i] && !(day < 1 || day > 31)) {\n                return false;\n            }\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) {\n                return false;\n            }\n        }\n        if (month == 2 && (day < 1 || day > 29)) {\n            return false;\n        }\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month == month_check1[i] && (!(day >= 1 || day <= 31))) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if(month == month_check1[i] && !(day >= 1 && day <= 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month != month_check1[i] && !(day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if (month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if (date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if (month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for (int i = 0; i < month_check1.length; i++) {\n            if (month == month_check1[i] && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for (int i = 0; i < month_check2.length; i++) {\n            if (month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if (month == 2) {\n            if (year % 4 == 0 && day < 1 || day > 29) return false;\n            if (year % 4 != 0 && day < 1 || day > 28) return false;\n        }\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}"
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy lines start\n            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n// buggy lines end\n                    }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "function range": "14,5-28,5",
      "output": [
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0)\n                count++;\n\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isLetter(curr)) count++;\n\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr)) count++;\n\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isLetter(curr)) count++;\n\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if (Character.isLetter(curr)) count++;\n\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isLetter(curr) && ((curr - 'a') % 2) == 0) count++;\n\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0)\n                count++;\n\n            }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n\n            if(Character.isLetter(curr) && ((curr - 'a') % 2) == 0) count++;\n\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}"
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy lines start\n        if(lst[i] <= lst[i + 1]) return false;\n// buggy lines end\n            }\n    return true;\n}",
      "function range": "22,5-37,5",
      "output": [
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for (int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for (int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for (int i = 0; i < lst.length; i++) {\n        if (count_num.get(lst[i]) > 2) return false;\n    }\n    for (int i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for (int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for (int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for (int i = 0; i < lst.length; i++) {\n        if (count_num.get(lst[i]) > 2)\n            return false;\n    }\n    for (int i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) \n{\n        if (lst[i] > lst[i + 1])\n            return false;\n            }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for (int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for (int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for (int i = 0; i < lst.length; i++) {\n        if (count_num.get(lst[i]) > 2) {\n            return false;\n        }\n    }\n    for (int i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) \n{\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) \n{\n        if(lst[i] > lst[i + 1]) \n            return false;\n            }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for (int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for (int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for (int i = 0; i < lst.length; i++) {\n        if (count_num.get(lst[i]) > 2) return false;\n    }\n    for (int i = 0; i < lst.length - 1; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) \n{\n        if (lst[i] > lst[i + 1])\n            return false;\n    }\n    return true;\n}",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n// buggy lines start\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n// buggy lines end\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "function range": "33,5-39,5",
      "output": [
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], interval2[1]);\n\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], interval2[1]);\n\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n        return \"NO\";\n    }\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], interval2[1]);\n\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n\n    if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n        return \"NO\";\n    }\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], interval2[1]);\n\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Integer.max(interval1[0], interval2[0]);\n    int r = Integer.min(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], intersection2[1]);\n\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], intersection2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String interpolation(int[] interval1, int[] interval2) {\n    int l = Math.min(interval1[0], interval2[0]);\n    int r = Math.max(interval1[1], interval2[1]);\n\n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
        "public static String intersection(int[] interval1, int[] interval2) {\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Mat.min(interval1[1], interval2[1]);\n        int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}"
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy lines start\n        else if(arr[i] > 0) prod *= 1;\n// buggy lines end\n            }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "function range": "16,5-28,5",
      "output": [
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n            }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n        else return 0;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n        else prod *= -1;\n            }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n            }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n        else prod *= 0;\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n\n        else if(arr[i] < 0) prod *= -1;\n\n            }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    int zeros = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) zeros++;\n        else prod *= arr[i] / Math.abs(arr[i]);\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    int zeroCount = 0;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) zeroCount++;\n        else if(arr[i] > 0) prod *= 1;\n            }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n        }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n        else return 0;\n        }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}"
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy lines start\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy lines end\n                            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "function range": "35,5-54,5",
      "output": [
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j] + grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i][j] + grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i][j] + grid[i + 1][j]);\n                if(j != n + 1) val = Math.max(val, grid[i][j] + grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0)\n                    val = Math.max(val, grid[i][j + 1]);\n                if(j != 0)\n                    val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1)\n                    val = Math.min(val, grid[i + 1][j]);\n                if(j != n - 1)\n                    val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for (int i = 0; i < k; i++) {\n        if ((i % 2) == 0)\n            ans[i] = 1;\n        else\n            ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j] + grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i][j] + grid[i - 1][j]);\n                if(i != n - 1) val = Math.min(val, grid[i][j] + grid[i + 1][j]);\n                if(j != n - 1) val = Math.max(val, grid[i][j] + grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for (int i = 0; i < k; i++) {\n        if ((i % 2) != 0)\n            ans[i] = val;\n        else\n            ans[i] = n * n + 1;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0)\n                    val = Math.max(val, grid[i][j + 1]);\n                if(j != 0)\n                    val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1)\n                    val = Math.min(val, grid[i + 1][j]);\n                if(j != n - 1)\n                    val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0)\n            ans[i] = 1;\n        else\n            ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, grid[i][j]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0)\n            ans[i] = 1;\n        else\n            ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                if (i != 0)\n                    val = Math.max(val, grid[i][j + 1]);\n                if (j != 0)\n                    val = Math.min(val, grid[i - 1][j]);\n                if (i != n - 1)\n                    val = Math.min(val, grid[i + 1][j]);\n                if (j != n - 1)\n                    val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for (int i = 0; i < k; i++) {\n        if ((i % 2) == 0)\n            ans[i] = 1;\n        else\n            ans[i] = val;\n    }\n    return ans;\n}",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n                if(i != n - 1)\n                    val = Math.min(val, grid[i + 1][j]);\n                if(j != n - 1)\n                    val = Math.max(val, grid[i][j - 1]);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}"
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy lines start\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i--) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy lines end\n        }\n    return sequence;\n}",
      "function range": "23,5-37,5",
      "output": [
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for (int i = 2; i < n; i++) {\n        if (i % 2 == 0)\n            sequence[i] = i / 2 - 1;\n        else\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for (int i = 2; i < n; i++) {\n        if (i % 2 == 0) {\n            sequence[i] = i / 2 - 1;\n        } else {\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for (int i = 2; i < n; i++) {\n        if (i % 2 == 0)\n            sequence[i] = (i / 2) - 1;\n        else\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for (int i = 2; i < n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for (int i = 2; i < n; i++) {\n        if (i % 2 == 0) {\n            sequence[i] = (i / 2) - 1;\n        } else {\n            sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n        }\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for (int i = 2; i < n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2] + (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for (int i = 2; i < n; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -3;\n    for(int i = 2; i < n; i++) {\n        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -2;\n    for (int i = 2; i < n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n\n    sequence[1] = -2;\n    for (int i = 2; i < n; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}"
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy lines start\n    while(n >= 0) {\n        int digit = n * 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n// buggy lines end\n                odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "function range": "13,5-26,5",
      "output": [
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n != 0) {\n        int digit = n % 10;\n        if(digit % 2 == 1) {\n            product /= digit;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n != 0) {\n        int digit = n % 10;\n        if(digit != 0) {\n            product /= digit;\n            if(digit % 2 != 0) odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n != 0) {\n        int digit = n % 10;\n        if(digit != 0 && digit % 2 != 0) {\n            product /= digit;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n != 0) {\n        int digit = n % 10;\n        if(digit % 2 == 1) {\n            product *= digit;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n != 0) {\n        int digit = n % 10;\n        if(digit % 2 != 0) {\n            product /= digit;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n > 0) {\n        int digit = n % 10;\n        if(digit % 2 == 1) {\n            product /= digit;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n != 0) {\n        int digit = n % 10;\n        if(digit != 0) {\n            product /= digit;\n            if(digit % 2 != 0) {\n                odd_count++;\n            }\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n != 0) {\n        int digit = n % 10;\n        if(digit % 2 == 0) {\n            product /= digit;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n > 0) {\n        int digit = n % 10;\n        if(digit % 2 == 1) {\n            product *= digit;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n\n    while(n > 0) {\n        int digit = n % 10;\n        if(digit % 2 != 0) {\n            product /= digit;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}"
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy lines start\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy lines end\n                i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "function range": "21,5-37,5",
      "output": [
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '[') {\n            opening_brackets.add(i);\n        } else {\n            closing_brackets.add(i);\n        }\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for (int idx : closing_brackets) {\n        if (i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(closing_brackets);\n    int cnt = 0, i = 0, l = closing_brackets.size();\n    for(int idx : opening_brackets) {\n        if(i < l || idx <= closing_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(closing_brackets);\n    int cnt = 0, i = 0, l = closing_brackets.size();\n    for(int idx : opening_brackets) {\n        if(i < l || idx >= closing_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') {\n            int c = 0;\n            while(i < brackets.length() && brackets.charAt(i) != ']') {\n                if(brackets.charAt(i) == '[') c++;\n                i++;\n            }\n        } else closing_brackets.add(i);\n    }\n    Collections.reverse(closing_brackets);\n    int cnt = 0, i = 0, l = closing_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= closing_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx > opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    return opening_brackets.size() > closing_brackets.size();\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n   Collections.reverse(opening_brackets);\n    int cnt = 0, i = 0, l = opening_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= opening_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n\n    return closing_brackets.size() >= 2 && opening_brackets.size() >= closing_brackets.size();\n}",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') {\n            continue;\n        } else {\n            closing_brackets.add(i);\n        }\n    }\n    Collections.reverse(closing_brackets);\n    int cnt = 0, i = 0, l = closing_brackets.size();\n    for(int idx : closing_brackets) {\n        if(i < l || idx >= closing_brackets.get(i)) {\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}"
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n// buggy lines start\n    int result = 0, i = 0;\n    for(int j = 0; j < lst.length; j++) {\n        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy lines end\n        }\n    return result;\n}",
      "function range": "16,5-22,5",
      "output": [
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double d : lst) {\n        result += (long) d * d;\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double d : lst) {\n        result += (long) (d * d);\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double v : lst) {\n        result += (long) v * v;\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        result += (long) lst[i] * lst[i];\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        result += (long) (Math.floor(lst[i])) * (Math.ceil(lst[i]));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    int result = 0;\n    for (double d : lst) {\n        result += (Math.floor((int) d)) * (Math.ceil((int) d));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double d : lst) {\n        result += (long) (Math.floor(d)) * (long) (Math.ceil(d));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double d : lst) {\n        result += (long) (Math.floor(d)) * (Math.ceil(d));\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double aLst : lst) {\n        result += (long) aLst * aLst;\n    }\n    return result;\n}",
        "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double d : lst) {\n        result += (Math.floor((int) d)) * (Math.ceil((int) d));\n    }\n    return result;\n}"
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy lines start\n    last = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n// buggy lines end\n    }",
      "function range": "18,5-26,5",
      "output": [
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if (parts.length > 0) {\n        last = parts[parts.length - 1];\n        if (txt.charAt(txt.length() - 1) == ' ') {\n            last = \" \";\n        }\n        if (txt.length() == 1) {\n            last = \" \";\n        }\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n    return false;\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if (parts.length > 0) {\n        last = parts[parts.length - 1];\n    }\n    if (last.length() == 0) {\n        return false;\n    }\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos && last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if (parts.length > 0) {\n        last = parts[parts.length - 1];\n    }\n    if (last.length() == 0) {\n        return false;\n    }\n    if (txt.charAt(txt.length() - 1) == ' ') {\n        last = \" \";\n    }\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos && last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if (txt.length() > 0) {\n        last = parts[parts.length - 1];\n        if (txt.charAt(txt.length() - 1) == ' ') {\n            last = \" \";\n        }\n        if (txt.length() == 1) {\n            last = \" \";\n        }\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n    return false;\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if(txt.length() > 0) last = parts[parts.length - 1];\n    if(txt.length() == 0 || last.length() == 0) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n    return (last.length() == 1) || (0 <= last_char_pos && last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if (parts.length > 0) {\n        last = parts[parts.length - 1];\n        if (txt.charAt(txt.length() - 1) == ' ') {\n            last = \" \";\n        }\n        if (txt.length() == 1) {\n            last = \" \";\n        }\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n        return (last.length() == 1) || (0 <= last_char_pos && last_char_pos <= 25);\n    }\n    return false;\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    String last_ = parts[parts.length - 1];\n    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if (parts.length > 0) {\n        last = parts[parts.length - 1];\n        if (txt.charAt(txt.length() - 1) == ' ')\n            last = \" \";\n        if (txt.length() == 1)\n            last = \" \";\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n    return false;\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if(txt.length() > 0) last = parts[parts.length - 1];\n    if(txt.length() == 1) last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n\n    if (parts.length > 0) {\n        last = parts[parts.length - 1];\n        if (txt.charAt(txt.length() - 1) == ' ') {\n            last = \" \";\n        }\n        if (txt.length() == 1) {\n            last = \" \";\n        }\n        int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'A';\n        return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    }\n    return false;\n}"
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n// buggy lines start\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy lines end\n        }\n    return ind;\n}",
      "function range": "16,5-22,5",
      "output": [
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = Math.max(ind, i + 1);\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < arr[i + 1]) {\n            ind = Math.max(ind, i + 1);\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 0;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = Math.max(ind, Math.max(i + 1, arr.length - ind));\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 0;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = Math.max(ind, i + 1);\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 0;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = Math.max(ind, Math.max(i + 1, arr.length - i - 1));\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 0;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] > arr[i + 1]) return false;\n        if(arr[i] < arr[i + 1]) ind = i + 1;\n        }\n    return true;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 0;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = Math.max(ind, Math.max(i, arr[i] + 1));\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 0;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) ind = Math.max(ind, i + 1);\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 1;\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] < arr[i + 1]) {\n            ind = i + 1;\n        } else if (arr[i] > arr[i + 1] && arr[i + 1] != 0) {\n            return false;\n        }\n    }\n    return ind;\n}",
        "public static int can_arrange(int[] arr) {\n    int ind = 0;\n    for(int i = 0; i < arr.length - 1; i++) {\n        if(arr[i] < arr[i + 1]) {\n            ind = Math.max(ind, Math.max(i + 1, arr.length - 1 - i));\n        }\n    }\n    return ind;\n}"
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n// buggy lines start\n    boolean negative = true, positive = true;\n    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n    for(int i = 1; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = false;\n            max_negative = Math.min(max_negative, lst[i]);\n// buggy lines end\n            } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "function range": "16,5-32,5",
      "output": [
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            max_negative = Math.min(max_negative, lst[i]);\n        } else if (lst[i] > 0) {\n            min_positive = Math.max(min_positive, lst[i]);\n        }\n    }\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] == 0)\n            continue;\n        if (lst[i] < 0) {\n            max_negative = Math.min(max_negative, lst[i]);\n        } else {\n            min_positive = Math.max(min_positive, lst[i]);\n        }\n    }\n    if (max_negative == Integer.MAX_VALUE)\n        max_negative = 0;\n    if (min_positive == Integer.MIN_VALUE)\n        min_positive = 0;\n    int[] result = { max_negative, min_positive };\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            max_negative = Math.min(max_negative, lst[i]);\n        } else {\n            min_positive = Math.max(min_positive, lst[i]);\n        }\n    }\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int num : lst) {\n        if (num < 0) {\n            max_negative = Math.min(max_negative, num);\n        } else {\n            min_positive = Math.max(min_positive, num);\n        }\n    }\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i] == 0)\n            continue;\n        else if (lst[i] < 0)\n            max_negative = Math.min(max_negative, lst[i]);\n        else\n            min_positive = Math.max(min_positive, lst[i]);\n    }\n    if (max_negative == Integer.MAX_VALUE)\n        max_negative = 0;\n    if (min_positive == Integer.MIN_VALUE)\n        min_positive = 0;\n    int[] result = { max_negative, min_positive };\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int num : lst) {\n        if (num < 0) {\n            max_negative = Math.min(max_negative, num);\n        } else {\n            min_positive = Math.max(min_positive, num);\n        }\n    }\n    \n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int num : lst) {\n        if (num < 0) {\n            max_negative = Math.min(max_negative, num);\n        } else {\n            min_positive = Math.max(min_positive, num);\n        }\n    }\n    return new int[] { max_negative, min_positive };\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int num : lst) {\n        if (num < 0) {\n            max_negative = Math.min(max_negative, num);\n        } else {\n            min_positive = Math.max(min_positive, num);\n        }\n    }\n\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int[] result = {Integer.MAX_VALUE, Integer.MIN_VALUE};\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] < result[0])\n            result[0] = lst[i];\n        if (lst[i] > result[1])\n            result[1] = lst[i];\n    }\n    return result;\n}",
        "public static int[] largest_smallest_integers(int[] lst) {\n    int max_negative = Integer.MAX_VALUE;\n    int min_positive = Integer.MIN_VALUE;\n    for (int num : lst) {\n        if (num < 0) {\n            max_negative = Math.min(max_negative, num);\n        } else if (num > 0) {\n            min_positive = Math.max(min_positive, num);\n        }\n    }\n    int[] result = {max_negative, min_positive};\n    return result;\n}"
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy lines start\n    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n// buggy lines end\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "function range": "17,5-36,5",
      "output": [
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Float) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Float) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Double) temp_a = (Double) a;\n    if(b instanceof Double) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Float) temp_a = ((Integer) b).doubleValue();\n    if(b instanceof Float) temp_b = ((Integer) a).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n    if(a instanceof Integer) temp_a = (double) ((Integer) a).intValue();\n    if(b instanceof Integer) temp_b = (double) ((Integer) b).intValue();\n\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n    if(a instanceof Integer) temp_a = (Double) a;\n    if(b instanceof Integer) temp_b = (Double) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n    if(a instanceof Integer) temp_a = (((Integer) a).doubleValue());\n    if(b instanceof Integer) temp_b = (((Integer) b).doubleValue());\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n    if(a instanceof Integer) temp_a = (Integer) a;\n    if(b instanceof Integer) temp_b = (Integer) b;\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double && b instanceof Integer) temp_a = ((Integer) b).doubleValue();\n    if(a instanceof Integer && b instanceof Double) temp_b = ((Integer) a).doubleValue();\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n    if(a instanceof Integer) temp_a = (((Integer) a).doubleValue());\n    if(b instanceof Integer) temp_b = (((Integer) b).doubleValue());\n\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n    if(a instanceof Integer) temp_a = (((Integer) a).doubleValue();\n    if(b instanceof Integer) temp_b = (((Integer) b).doubleValue();\n\n        if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n\n    if(a instanceof Double) temp_a = ((Double) a).doubleValue();\n    if(b instanceof Double) temp_b = ((Double) b).doubleValue();\n    if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n    if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}"
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n// buggy lines start\n    return ((n * 2 == 1) ^ (n < 8));\n// buggy lines end\n    }",
      "function range": "13,5-15,5",
      "output": [
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && (n < 8);\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && ((n * 2 != 1) || (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && (n != 8);\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && (n < 8);\n    }",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && (n != 8);\n    }",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && (n < 11);\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) && (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && (n < 8));\n}",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && (n < 1000000);\n    }",
        "public static boolean is_equal_to_sum_even(int n) {\n    return ((n * 2 == 1) ^ (n < 8)) && !(n < 8);\n    }"
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy lines start\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i;\n// buggy lines end\n        }\n    return special_fact;\n}",
      "function range": "18,5-25,5",
      "output": [
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        if (n % i == 0) {\n            fact_i *= i * fact_i;\n            special_fact += i * fact_i;\n        }\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i > 0; i--) {\n        fact_i *= i;\n        special_fact += i * fact_i;\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        if (n % i == 0) {\n            fact_i *= i;\n            special_fact += i;\n        }\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        if (n % i == 0) {\n            fact_i *= i;\n            special_fact += n / i;\n        }\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i * (fact_i + 1);\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        fact_i *= i * fact_i;\n        special_fact += i * fact_i * sign;\n        sign *= -1;\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        if (n % i == 0) {\n            fact_i *= i;\n            special_fact += fact_i;\n        }\n    }\n    return special_fact;\n}",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n\n    for (long i = n; i >= 1; i--) {\n        if (n % i == 0) {\n            special_fact += i;\n        }\n    }\n    return special_fact;\n}"
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy lines start\n    return new_text;\n// buggy lines end\n    }",
      "function range": "13,5-37,5",
      "output": [
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    return new_text.toLowerCase();\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    new_text = new_text.toLowerCase();\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    new_text = new_text.toLowerCase();\n    new_text = new_text.replaceAll(\"[^a-z0-9]\", \"\");\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    new_text = new_text.toLowerCase();\n    new_text = new_text.replaceAll(\"^[^a-z]\", \"\");\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    new_text = new_text.toLowerCase();\n    new_text = new_text.replaceAll(\"-\", \"\");\n    new_text = new_text.replaceAll(\"_\", \"\");\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\";\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    return new_text.toLowerCase();\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    new_text = new_text.toLowerCase();\n    new_text = new_text.replaceAll(\"^[-_]+\", \"\");\n    new_text = new_text.replaceAll(\"[-_]+\", \" \");\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    new_text = new_text.toLowerCase();\n    new_text = new_text.replaceAll(\"^[a-z0-9]+\", \"\");\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    new_text = new_text.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n\n    new_text = new_text.toLowerCase();\n    new_text = new_text.replaceAll(\"[^a-z0-9]+\", \"\");\n    return new_text;\n}"
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy lines start\n    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy lines end\n            return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "function range": "17,5-35,5",
      "output": [
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    for (int i = 0; i < file_name.length(); i++) {\n        if (!(file_name.charAt(i) >= 'a' && file_name.charAt(i) <= 'z' || file_name.charAt(i) >= 'A' && file_name.charAt(i) <= 'Z' || file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9')) {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    for (int i = 0; i < file_name.length(); i++) {\n        if (!(file_name.charAt(i) >= 'a' && file_name.charAt(i) <= 'z' || file_name.charAt(i) >= 'A' && file_name.charAt(i) <= 'Z' || file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9')) {\n            return \"No\";\n        }\n    }\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    if (!(('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z') || ('A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z')))\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    if (!(('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z') || ('A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z')))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    if (!(('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z') || ('A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z')))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    if (!(('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z') || ('A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z')))\n        return \"No\";\n    if (digit_cnt > 3)\n        return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    for (int i = 0; i < file_name.length(); i++) {\n        if (!(file_name.charAt(i) isDigit || file_name.charAt(i) isLowerCase || file_name.charAt(i) isUpperCase)) {\n            return \"No\";\n        }\n    }\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    for (int i = 0; i < file_name.length(); i++) {\n        if (!(file_name.charAt(i) == '.' || ('a' <= file_name.charAt(i) && file_name.charAt(i) <= 'z') || ('A' <= file_name.charAt(i) && file_name.charAt(i) <= 'Z') || ('0' <= file_name.charAt(i) && file_name.charAt(i) <= '9'))) {\n            return \"No\";\n        }\n    }\n    if (lst[0].length() == 0)\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    for (int i = 0; i < file_name.length(); i++) {\n        if (!(file_name.charAt(i) >= 'a' && file_name.charAt(i) <= 'z' || file_name.charAt(i) >= 'A' && file_name.charAt(i) <= 'Z' || file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9' || file_name.charAt(i) == '_')) {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n\n    for (int i = 0; i < file_name.length(); i++) {\n        if (!(file_name.charAt(i) isDigit || file_name.charAt(i) isLowerCase || file_name.charAt(i) isUpperCase)) {\n            return \"No\";\n        }\n    }\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}"
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy lines start\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n// buggy lines end\n                    result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "function range": "13,5-24,5",
      "output": [
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        if (i % 4 == 0)\n            result += lst[i] * lst[i] * lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else\n            result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        if (i % 4 == 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i] * lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        if (i % 4 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 3 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        if (i % 4 == 0 && i != 0)\n            result += lst[i] * lst[i];\n        else if (i % 3 == 0)\n\n                    result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        result += lst[i] * lst[i];\n\n    }\n    return result;\n}",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n\n        result += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n\n    }\n    return result;\n}"
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy lines start\n        for (int i = 2; i < word.length(); i += 1){\n// buggy lines end\n                    if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "function range": "22,5-34,5",
      "output": [
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 3; i < word.length(); i += 1) {\n\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 2; i <= word.length(); i++) {\n\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 2; i < word.length() && flag == 0; i += 1){\n                    if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 2; i <= word.length(); i += 1) {\n\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 2; i < word.length() - 1; i += 1) {\n\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 2; i <= word.length(); i += 1){\n\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 3; i < word.length(); i += 1){\n\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 2; i < word.length() && flag == 0; i += 1) {\n\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 2; i < word.length() - 2; i += 1) {\n\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n\n        for (int i = 2; i < word.length() && flag == 0; i ++){\n                    if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}"
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy lines start\n    if (numerator / denom == (int) (numerator / denom))\n// buggy lines end\n            return true;\n    return false;\n}",
      "function range": "15,5-26,5",
      "output": [
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    int result = numerator / denom;\n    if (result == (int) result)\n        return true;\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    else if (numerator % denom == 0)\n        return true;\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    else if (numerator / denom == (int) (numerator / denom))\n        return true;\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    int newNumerator = numerator / denom;\n    int newDenom = Integer.parseInt(x.split(\"/\")[1]);\n    return newNumerator == Integer.parseInt(n.split(\"/\")[0]);\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    int result = numerator / denom;\n    if (result * denom == numerator)\n        return true;\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    int q = numerator / denom;\n    if (q * denom == numerator)\n        return true;\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    int newDenom = gcd(Math.abs(numerator), denom);\n    if (newDenom == 1)\n        return true;\n    return false;\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    int newNumerator = numerator / denom;\n    int newDenom = Integer.parseInt(o.split(\"/\")[1]);\n    return newNumerator == Integer.parseInt(n.split(\"/\")[0]);\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    int newNumerator = numerator / denom;\n    int newDenom = Integer.parseInt(x.split(\"/\")[1]);\n    return newNumerator == Integer.parseInt(n.split(\"/\")[0]) && newDenom == Integer.parseInt(n.split(\"/\")[1]);\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n\n    if (denom == 0)\n        return false;\n    int newNumerator = numerator / denom;\n    int newDenom = Integer.parseInt(o2.split(\"/\")[1]);\n    return newNumerator == Integer.parseInt(o1.split(\"/\")[0]) && newDenom == Integer.parseInt(o2.split(\"/\")[1]);\n}"
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy lines start\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n// buggy lines end\n                    if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "function range": "17,5-44,5",
      "output": [
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        if (! digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            int digitNext = ((n + \"\").toCharArray()[j] - '0') * neg;\n            if (digitNext < 0) {\n                digitNext = -digitNext;\n            }\n            digit += digitNext;\n        }\n        digits.add(digit);\n\n        if (! digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            int digit = ((n + \"\").toCharArray()[j] - '0') * neg;\n            if (! digits.contains(digit)) {\n                digits.add(digit);\n                digits_number.put(digit, new ArrayList<Integer>());\n            }\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            int digitNext = ((n + \"\").toCharArray()[j] - '0') * neg;\n            if (digitNext < 0)\n                digitNext = -digitNext;\n            digit += digitNext;\n        }\n        digits.add(digit);\n\n        if (! digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            int digit = ((n + \"\").toCharArray()[j] - '0') * neg;\n            if (! digits.contains(digit))\n                digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        digits.add(digit);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n   ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n   ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n        }\n        if (! digits_number.containsKey(digit)) {\n            digits_number.put(digit, new ArrayList<Integer>());\n        }\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            int digit = ((n + \"\").toCharArray()[j] - '0') * neg;\n            if (! digits.contains(digit)) {\n                digits.add(digit);\n                digits_number.put(digit, new ArrayList<Integer>());\n            }\n            digits_number.get(digit).add(nums[i]);\n        }\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}"
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy lines start\n            if (odd_digits.contains(number_as_string.charAt(0))\n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n// buggy lines end\n                            count += 1;\n        }\n    }\n    return count;\n}",
      "function range": "14,5-26,5",
      "output": [
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (int num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            char firstChar = number_as_string.charAt(0);\n            char lastChar = number_as_string.charAt(number_as_string.length() - 1);\n            if (odd_digits.contains(firstChar) && odd_digits.contains(lastChar))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (int num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            char evenDigit = number_as_string.charAt(number_as_string.length() - 1);\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(evenDigit)) {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (int num : nums) {\n        if (num > 10) {\n            String number_as_string = Integer.toString(num);\n            if (odd_digits.contains(number_as_string.charAt(0))\n                    && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1)))\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            char evenDigit = number_as_string.charAt(number_as_string.length() - 1);\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(evenDigit)) {\n                count += 1;\n            }\n\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(Integer.valueOf(number_as_string.charAt(0)))\n                    && odd_digits.contains(Integer.valueOf(number_as_string.charAt(number_as_string.length() - 1))))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            char firstChar = number_as_string.charAt(0);\n            char lastChar = number_as_string.charAt(number_as_string.length() - 1);\n            if (odd_digits.contains(firstChar) && odd_digits.contains(lastChar))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (int num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            if (odd_digits.contains(Integer.valueOf(number_as_string.charAt(0)))\n                    && odd_digits.contains(Integer.valueOf(number_as_string.charAt(number_as_string.length() - 1))))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (int num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            char firstChar = number_as_string.charAt(0);\n            char lastChar = number_as_string.charAt(number_as_string.length() - 1);\n            if (odd_digits.contains((int) firstChar) && odd_digits.contains((int) lastChar))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (int num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n\n            char evenDigit = number_as_string.charAt(number_as_string.length() - 1);\n            if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(evenDigit))\n\n                            count += 1;\n        }\n    }\n    return count;\n}",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (int num : nums) {\n        if (num > 10) {\n            String number_as_string = Integer.toString(num);\n            if (odd_digits.contains(Integer.valueOf(number_as_string.charAt(0)))\n                    && odd_digits.contains(Integer.valueOf(number_as_string.charAt(number_as_string.length() - 1))))\n                        count += 1;\n        }\n    }\n    return count;\n}"
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy lines start\n    for (int i = 0; i < n-2; i += 1) {\n        for (int j = 0; j < n-1; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n// buggy lines end\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "16,5-30,5",
      "output": [
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1) {\n        for (int j = 0; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1) {\n        for (int j = i + 1; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1) {\n        for (int j = i + 1; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1) {\n        for (int j = 0; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1) {\n        for (int j = i + 1; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if (A[i] + A[j] + A[k] % 3 == 0)\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i += 1) {\n        for (int j = 0; j < n; j += 1) {\n            for (int k = 0; k < n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i++)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i++)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n\n                    if ((A[i] + A[j] + A[k]) % 3 == 0)\n                        result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i++)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < n; k++) {\n\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy lines start\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n// buggy lines end\n        return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        if (i + 1 < planet2_index)\n            result.add(planet_names.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i < planet2_index + 1; i += 1) {\n        if (i == planet1_index) {\n            result.add(planet1);\n        }\n        result.add(planet_names.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        if (i + 1 < planet2_index)\n            result.add(planet_names.get(i));\n    }\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        if (i + 1 == planet2_index)\n            break;\n        result.add(planet_names.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        if (i + 1 != planet2_index)\n            result.add(planet_names.get(i));\n    }\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i <= planet2_index; i += 1) {\n        if (i == planet1_index) {\n            result.add(planet1);\n        }\n        if ((i > planet1_index) && (i < planet2_index)) {\n            result.add(planet_names.get(i));\n        }\n    }\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i < planet2_index + 1; i += 1)\n        result.add(planet_names.get(i));\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i < planet2_index + 1; i += 1) {\n        if (i == planet1_index)\n            continue;\n        result.add(planet_names.get(i));\n    }\n\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    if (planet1_index > planet2_index) {\n        int tmp = planet1_index;\n        planet1_index = planet2_index;\n        planet2_index = tmp;\n    }\n    for (int i = planet1_index; i <= planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n}",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        if (i != planet1_index)\n            result.add(planet_names.get(i));\n    }\n\n    return result;\n}"
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy lines start\n        (s1, s2) -> s1.length() - s2.length()\n// buggy lines end\n            );\n    return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s2.length() - s1.length()\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n   ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s2.length() - s1.length()\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s2.length() - s1.length()\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s2.length() - s1.length()\n    );\n    return result;\n}",
        "public staticArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s2.length() - s1.length()\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n   Collections.sort(\n        result,\n        (s1, s2) -> s2.length() - s1.length()\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result, \n        (s1, s2) -> s2.length() - s1.length()\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s2.length() - s1.length()\n        );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> Integer.compare(s2.length(), s1.length())\n            );\n    return result;\n}",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = newArrayList();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        (s1, s2) -> s2.length() - s1.length()\n            );\n    return result;\n}"
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy lines start\n        if (n % i == 0) return x;\n    }\n    return y;\n// buggy lines end\n        }",
      "function range": "11,5-17,5",
      "output": [
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) {\n            return x;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) {\n            if (x < 0 || x >= n || y < 0 || y >= n)\n                return x;\n            else\n                return y;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) {\n            if (x % i == 0)\n                return x;\n            else\n                return y;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return x;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) {\n            if (x % i == 0 && y % i == 0)\n                return i;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) {\n            if (x < 0 || x > y)\n                return x;\n            else\n                return y;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i ++) {\n        if (n % i == 0) {\n            return x;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) {\n            if (x % i == 0 && y % i == 0)\n                return Math.min(x, y);\n            else\n                return x;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) {\n            if (x != y)\n                return x;\n        }\n    }\n    return y;\n}",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        if (n % i == 0) {\n            if (x <= y) return x;\n            else return y;\n        }\n    }\n    return y;\n}"
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy lines start\n                result += d_int;\n// buggy lines end\n                            }\n        }\n    }\n    return result;\n}",
      "function range": "14,5-25,5",
      "output": [
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 2 * d_int;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += (d_int * 2);\n            }\n        }\n    }\n    return result;\n}",
        "public static intdouble_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 2 * d_int;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 2 * d_int;\n            } else if (d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result -= d_int;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int > 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int * 2;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (double d : lst) {\n        int d_int = (int) d;\n        if (d_int % 2 == 1 && d_int >= 0) {\n            result += d_int;\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result ^= d_int;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[]lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 2 * d_int;\n            }\n        }\n    }\n    return result;\n}"
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy lines start\n        result[i] = Math.floorDiv(game[i], guess[i]);\n// buggy lines end\n            }\n    return result;\n}",
      "function range": "12,5-20,5",
      "output": [
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n        }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.max(Math.floorDiv(game[i], guess[i]), 0);\n        }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (guess[i] != 0) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0;\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (guess[i] != 0) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0;\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (guess[i] != 0) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0;\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (guess[i] != 0) {\n            result[i] = Math.floorDiv(game[i], guess[i]);\n        } else {\n            result[i] = 0;\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (guess[i] != 0) {\n            result[i] = Math.",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n        if (result[i] < 0)\n            result[i] = 0;\n        }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n    }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n            }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n        if (result[i] == 0) {\n            result[i] = 1;\n        }\n        }\n    return result;\n}",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        result[i] = Math.floorDiv(game[i], guess[i]);\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n        if (result[i] > guess[i]) {\n            result[i] = guess[i];\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n        if (result[i] > guess[i]) {\n            result[i] = guess[i];\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n        if (result[i] > guess[i]) {\n            result[i] = guess[i];\n        }\n        if (result[i] < 0) {\n            result[i] = 0;\n        }\n        if (game[i] % guess[i] != 0) {\n            result[i] += 1;\n        }\n        if (result[i] > guess[i]) {\n            result[i] = guess[i];\n        }\n        if (result[i] < 0) {\n            result[i] = "
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy lines start\n            if (Character.toUpperCase(c) == c) SM += 1;\n            if (Character.toLowerCase(c) == c) CAP += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n// buggy lines end\n                }\n    return class_name + \".\" + strong;\n}",
      "function range": "20,5-35,5",
      "output": [
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\n                CAP += 1;\n            if (Character.isLowerCase(c))\n                SM += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z')\n                CAP += 1;\n            if (c >= 'a' && c <= 'z')\n                SM += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\n                CAP += 1;\n            if (Character.isLowerCase(c))\n                SM += 1;\n        }\n        int score = CAP - SM;\n        if (score > val) {\n            val = score;\n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int caps = 0;\n        int lc = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                caps++;\n            } else if (Character.isLowerCase(c)) {\n                lc++;\n            }\n        }\n        if (val < caps - lc) {\n            val = caps - lc;\n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z')\n                CAP += 1;\n            if (c >= 'a' && c <= 'z')\n                SM += 1;\n        }\n        val = CAP - SM;\n        if (val >= 0) {\n            strong = s;\n            break;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c>='A' && c<='Z')\n                CAP += 1;\n            if (c>='a' && c<='z')\n                SM += 1;\n        }\n        val = CAP - SM;\n        strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.toUpperCase(c) == c)\n                SM += 1;\n            if (Character.toLowerCase(c) == c)\n                CAP += 1;\n        }\n        val = Math.max(val, CAP - SM);\n        if (val == (CAP - SM))\n            strong = s;\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z')\n                CAP += 1;\n            if (c >= 'a' && c <= 'z')\n                SM += 1;\n        }\n        val = CAP - SM;\n        if (val >= 0) {\n            strong = s;\n            break;\n        }\n    }\n    if (strong == null)\n        return class_name;\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\n                CAP += 1;\n            if (Character.isLowerCase(c))\n                SM += 1;\n        }\n        if (val < CAP - SM) {\n            val = CAP - SM;\n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z')\n                CAP += 1;\n            if (c >= 'a' && c <= 'z')\n                SM += 1;\n        }\n        val = CAP - SM;\n        if (val > 0) {\n            strong = s;\n            val;\n        }\n    }\n    return class_name + \".\" + strong;\n}"
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy lines start\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n// buggy lines end\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    for (int i = 0; i < a.length() - l + 1; i++) {\n        String pat = b;\n        int j = 0;\n        for (; j < l; j++) {\n            if (a.charAt(i + j) != pat.charAt(j)) break;\n        }\n        if (j == l)\n            return true;\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    for (int i = 0; i < a.length() - l + 1; i++) {\n        String pat = b;\n        int j = 0;\n        for (; j < l; j++) {\n            if (a.charAt(i + j) != pat.charAt(j))\n                break;\n        }\n        if (j == l)\n            return true;\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    for (int i = 0; i < a.length(); i++) {\n        String pat = b.substring(0, a.length() - i);\n        for (int j = 0; j < pat.length(); j++) {\n            if (a.substring(i, i + pat.length()).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    for (int i = 0; i < a.length(); i += 1) {\n        String pat = b.substring(0, l - i) + \"String_Node_Str\" + b.substring(l - i, l);\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    if (l == 0)\n        return true;\n    String pat = b;\n    for (int i = 0; i < a.length(); i += 1) {\n        for (int j = 0; j < l; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    for (int i = 0; i < a.length() - l + 1; i++) {\n        String pat = b;\n        int j;\n        for (j = 0; j < l; j++) {\n            if (a.charAt(i + j) != pat.charAt(j))\n                break;\n        }\n        if (j == l)\n            return true;\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    for (int i = 0; i < a.length() - l + 1; i += 1) {\n        String pat = b.substring(0, l - i);\n        for (int j = 0; j < l - pat.length() + 1; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + pat.length()))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    for (int i = 0; i < a.length() - l + 1; i += 1) {\n        String pat = b.substring(0, l - i);\n        for (int j = 0; j < l - i; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    for (int i = 0; i < a.length(); i += 1) {\n        String pat = b.substring(0, l - i) + \"String_Node_Str\" + b.substring(l - i);\n        for (int j = 0; j < l; j += 1) {\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n\n    String pat = b.replaceAll(\"String_Node_Str\", \"String_Node_Str\");\n    if (pat.length() == 0)\n        return true;\n    for (int i = 0; i < a.length(); i += 1) {\n        if (a.substring(i, i + l).equals(pat))\n            return true;\n    }\n    return false;\n}"
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy lines start\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n// buggy lines end\n        }\n    return new int[] {even_count, odd_count};\n}",
      "function range": "10,5-19,5",
      "output": [
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    String str = Integer.toString(num, 2);\n    for (char c : str.toCharArray()) {\n        if (c == '0') even_count += 1;\n        if (c == '1') odd_count += 1;\n\n        }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if ((c - '0') % 2 == 0) even_count += 1;\n        if ((c - '0') % 2 == 1) odd_count += 1;\n    }\n\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if (c != ' ' && c != '+' && c != '-') {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count += 1;\n        }\n    }\n\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if (c != '+' && c != '-') {\n            if ((int)c % 2 == 0)\n                even_count += 1;\n            if ((int)c % 2 == 1)\n                odd_count += 1;\n        }\n    }\n\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    String str = Integer.toString(num);\n    for (char c : str.toCharArray()) {\n        if (c - '0' % 2 == 0) even_count += 1;\n        if (c - '0' % 2 == 1) odd_count += 1;\n    }\n\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if (c != '+' && c != '-') {\n            if ((int)c % 2 == 0) even_count += 1;\n            if ((int)c % 2 == 1) odd_count += 1;\n        }\n    }\n\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    for (char c : (num + \"\").toCharArray()) {\n        if (c != ' ' && c != '+' && c != '-') {\n            if ((int)c % 2 == 0)\n                even_count += 1;\n            if ((int)c % 2 == 1)\n                odd_count += 1;\n        }\n    }\n\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    String str = Integer.toString(num, 2);\n    for (char c : str.toCharArray()) {\n        if (c == '0') even_count++;\n        if (c == '1') odd_count++;\n\n        }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    String str = Integer.toString(num);\n    for (char c : str.toCharArray()) {\n        if (c >= '0' && c <= '9') {\n            if ((c - '0') % 2 == 0) even_count += 1;\n            if ((c - '0') % 2 == 1) odd_count += 1;\n        }\n        }\n    return new int[] {even_count, odd_count};\n}",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n\n    String strNum = Integer.toString(num);\n    for (char c : strNum.toCharArray()) {\n\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] {even_count, odd_count};\n}"
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy lines start\n        result += sym[i];\n// buggy lines end\n                number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "function range": "13,5-27,5",
      "output": [
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number % num[i] != 0 && number > num[i]) {\n            result += sym[i + 1];\n            number -= num[i];\n            continue;\n        } else {\n            result += sym[i];\n        }\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number >= num[i]) {\n            result += sym[i];\n            number -= num[i];\n        } else {\n            i--;\n        }\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number % num[i] != 0 && number > num[i]) {\n            result += sym[i + 1];\n            number -= num[i];\n            number %= num[i];\n        } else {\n            result += sym[i];\n        }\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number % num[i] != 0 && number % (num[i] * 5) != 0) {\n            result += sym[i];\n            number %= num[i];\n        }\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number % num[i] != 0 && number % (num[i] + 1) != 0) {\n            result += sym[i + 1];\n            number -= num[i];\n        } else {\n            result += sym[i];\n            number -= num[i];\n        }\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number % num[i] != 0 && number > num[i]) {\n            result += sym[i + 1];\n            number -= num[i];\n            continue;\n        }\n        result += sym[i];\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number % num[i] != 0 && number % (num[i] + 1) != 0) {\n            result += sym[i + 1];\n            number -= num[i + 1];\n        } else {\n            result += sym[i];\n            number -= num[i];\n        }\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number % num[i] > 0) {\n            result += sym[i];\n            number -= num[i];\n        }\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number % num[i] > 0)\n            result += sym[i];\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        int k = number / num[i];\n        for (int j = 0; j < k; j++) {\n            result += sym[i];\n        }\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}"
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy lines start\n    return a*a + b*b == c*c;\n// buggy lines end\n    }",
      "function range": "12,5-14,5",
      "output": [
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c && a + b + c == 17;\n    }",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c && a > 0 && b > 0 && c > 0;\n    }",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c && b < a && c < a;\n    }",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c && a + b + c == 17;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c && b < a && c < a;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c && b < a;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c && b < a;\n    }",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c || a*a + b*b == c*c + 1;\n}",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n    return a * a + b * b == c * c;\n}"
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy lines start\n            return s1.size() - s2.size();\n// buggy lines end\n                    }\n    );\n    return words_list.get(0);\n}",
      "function range": "18,5-31,5",
      "output": [
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s2.size() - s1.size();\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return s2.size() - s1.size();\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            int cmp = s1.size() - s2.size();\n            if (cmp == 0)\n                cmp = w1.compareTo(w2);\n            return cmp;\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            return Integer.compare(s1.size(), s2.size());\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            int s1_size = s1.size();\n            int s2_size = s2.size();\n            return s1_size - s2_size;\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            int setSizeDifference = s1.size() - s2.size();\n            if (setSizeDifference != 0) {\n                return setSizeDifference;\n            } else {\n                return w1.length() - w2.length();\n            }\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            int setSizeDifference = s1.size() - s2.size();\n            if (setSizeDifference != 0)\n                return setSizeDifference;\n            return w1.length() - w2.length();\n\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            int setSizeDifference = s1.size() - s2.size();\n            if (setSizeDifference != 0)\n                return setSizeDifference;\n            return w1.length() - w2.length();\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            int cmp = s1.size() - s2.size();\n            if (cmp == 0) {\n                cmp = w1.length() - w2.length();\n            }\n            return cmp;\n        }\n    );\n    return words_list.get(0);\n}",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n\n            int cmp = s1.size() - s2.size();\n            if (cmp == 0)\n                cmp = w1.length() - w2.length();\n            return cmp;\n\n        }\n    );\n    return words_list.get(0);\n}"
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n// buggy lines start\n    return new int[] {number + need,  remaining - need};\n// buggy lines end\n    }",
      "function range": "31,5-33,5",
      "output": [
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need, remaining - need, need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n\n    return new int[] {number + need, remaining - need, need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n\n    return new int[] {number + need, remaining - need, need};\n\n    }",
        "public static int[] eat(int number, int need, int remaining) {\n\n    return new int[] {number + need, remaining - need, false};\n\n    }",
        "public static int[] eat(int number, int need, int remaining) {\n\n    return new int[] {number + need,  remaining - need, remaining};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n\n    return new int[] {number + need,  remaining - need, remaining};\n\n    }",
        "public static int[] eat(int number, int need, int remaining) {\n\n    return new int[] {number + need, remaining - need, remaining};\n\n    }",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need, need};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need,  remaining - need, remaining};\n}",
        "public static int[] eat(int number, int need, int remaining) {\n    return new int[] {number + need, remaining - need, false};\n}"
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy lines start\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n// buggy lines end\n        }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "function range": "30,5-38,5",
      "output": [
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + operand[0];\n    for (int i = 1; i < operand.length; i++) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + operand[0];\n    for (int i = 1; i < operator.length; i++) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + operand[0] + operator[1] + operand[1];\n\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + operand[0];\n    for (int i = 1; i < operator.length; i++) {\n        expression += operator[i] + operand[i];\n    }\n\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + operand[0] + operator[1] + operand[1] + operator[2] + operand[2];\n\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + operand[0];\n    for (int i = 1; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + operand[0];\n    for (int i = 1; i < operator.length; i += 1) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expr = \"String_Node_Str\";\n    for (int i = 0; i < operand.length; i++) {\n        expr += operator[i] + operand[i];\n    }\n    Object result = engine.eval(expr);\n    if (result instanceof Double) {\n        return (Double) result;\n    } else {\n        return Double.parseDouble(result.toString());\n    }\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0];\n    for (int i = 1; i < operand.length; i++) {\n        expression += operator[i] + operand[i];\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n\n    String expression = operator[0] + operand[0];\n    for (int i = 1; i < operand.length; i += 1) {\n        expression += operator[i] + operand[i];\n        }\n    return Double.parseDouble(engine.eval(expression).toString());\n}"
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy lines start\n        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(Character.toLowerCase(c));\n        flg = 1;\n// buggy lines end\n            }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (flg == 0) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (flg == 0) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n\n        if (flg == 0) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n        } else {\n            sb.append(Character.toLowerCase(c));\n        }\n        flg = 1;\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (flg == 0) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i --) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n\n        if (flg == 0) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n            flg = 1;\n        } else {\n            sb.append(c);\n\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLetter(c)) {\n            if (flg == 0) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n            flg = 1;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLetter(c)) {\n            if (flg == 0) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (flg == 0) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                flg = 1;\n                sb.append(c);\n            }\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n\n        if (flg == 0) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n            flg = 1;\n        } else {\n            sb.append(c);\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}"
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy lines start\n    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n// buggy lines end\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "function range": "13,5-20,5",
      "output": [
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigestComplete md = new MessageDigestComplete(\"SHA-384\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigestComplete md = new MessageDigestComplete(\"SHA-384\");\n    md.update(text.getBytes(), 0, text.length());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest complete = MessageDigest.getInstance(\"SHA-256\");\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    byte[] bytes = text.getBytes(Charset.forName(\"String_Node_Str\"));\n    md5.update(bytes);\n    byte[] digest = md5.digest();\n    complete.update(digest);\n    return DatatypeConverter.printHexBinary(complete.digest()).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest complete = MessageDigest.getInstance(\"SHA-384\");\n    complete.update(text.getBytes());\n    byte[] digest = complete.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n    digest.update(text.getBytes());\n    byte[] md5Bytes = digest.digest();\n    return DatatypeConverter.printHexBinary(md5Bytes).toLowerCase();\n}",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n\n    MessageDigest complete = MessageDigest.getInstance(\"SHA-256\");\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    byte[] bytes = text.getBytes(StandardCharsets.UTF_8);\n    md5.update(bytes);\n    byte[] digest = md5.digest();\n    complete.update(digest);\n    return DatatypeConverter.printHexBinary(complete.digest()).toLowerCase();\n}"
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy lines start\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n// buggy lines end\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "function range": "14,5-23,5",
      "output": [
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(a, 2);\n    int upper = Math.min(b, 8);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n\n    int lower = Math.max(a, 2);\n    int upper = Math.min(b, 8);\n\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(10, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = a < 2 ? 2 : a;\n    int upper = b > 8 ? 8 : b;\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lowerBound = Math.max(2, a);\n    int upperBound = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lowerBound; i <= upperBound; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(Integer.MIN_VALUE, a);\n    int upper = Math.min(Integer.MAX_VALUE, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(Integer.valueOf(a), 2);\n    int upper = Math.min(Integer.valueOf(b), 8);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Integer.MAX_VALUE;\n    int upper = Integer.MIN_VALUE;\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0) result.add(i);\n        if (i < lower) lower = i;\n        if (i > upper) upper = i;\n    }\n    return result;\n}",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n    int lower = Math.max(2, a);\n    int upper = Math.min(8, b);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        result.add(i);\n    }\n    return result;\n}"
      ]
    }
  },
  "model": "CodeLlama-13b-hf",
  "train_dataset": "apr",
  "time": 1868,
  "benchmark": "humaneval"
}